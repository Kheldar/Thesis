#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass beamer
\begin_preamble
\usetheme{PaloAlto}
\usepackage{multicol}
\AtBeginSection[]
{
  \begin{frame}
    \frametitle{Table of Contents}
    \begin{multicols}{2}
    \tableofcontents[currentsection]
    \end{multicols}
  \end{frame}
}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
title[Online Privacy]{Usable Online Privacy}
\end_layout

\begin_layout Plain Layout


\backslash
author[Josh Godsiff]{Joshua Korner-Godsiff - u4685222
\end_layout

\begin_layout Plain Layout

	
\backslash

\backslash
 Supervisor: Roger Clarke}
\end_layout

\end_inset


\end_layout

\begin_layout Subtitle
Browser-Based End-to-End Encryption Delivered by a Service Operator
\end_layout

\begin_layout Institute
Australian National University
\end_layout

\begin_layout Date
19th May 2014
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}{Table Of Contents}
\end_layout

\begin_layout Plain Layout


\backslash
begin{multicols}{2}
\end_layout

\begin_layout Plain Layout


\backslash
tableofcontents{}
\end_layout

\begin_layout Plain Layout


\backslash
end{multicols}
\end_layout

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
The Problem
\end_layout

\begin_layout BeginFrame
The Problem
\end_layout

\begin_layout Standard
\noindent
\align center
The NSA is spying on everything everyone does online.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
The Problem
\end_layout

\begin_layout Standard
\noindent
\align center
So are the intelligence agencies of:
\end_layout

\begin_layout Standard
\noindent
\align center
UK, Canada, NZ, Australia, Austria, India, Netherlands, Russia, China, Iran,
 Syria, Israel
\end_layout

\begin_layout Standard
\noindent
\align center
And probably many more.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
The Problem
\end_layout

\begin_layout Standard
\noindent
\align center
Seeing more serious and sophisticated security breaches (
\begin_inset Quotes eld
\end_inset

hacks
\begin_inset Quotes erd
\end_inset

) of large organisations.
\end_layout

\begin_layout Standard
\noindent
\align center
Things like Heartbleed don't help.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
The Problem
\end_layout

\begin_layout Standard
\noindent
\align center
Some organisations are just giving their users' data away.
\end_layout

\begin_layout Standard
\noindent
\align center
(For money).
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
The Problem
\end_layout

\begin_layout Standard
\noindent
\align center
How is the average, everyday user supposed to protect their privacy?
\end_layout

\begin_layout Standard
\noindent
\align center
How is the average company supposed to protect itself and its users?
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Subsection
The Solution?
\end_layout

\begin_layout BeginFrame
The Solution?
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename Diagrams/encryptAllTheThings.jpg
	scale 40

\end_inset


\end_layout

\begin_layout BeginFrame
The Solution?
\end_layout

\begin_layout Itemize
\noindent
Nice idea, but average user does not know
\end_layout

\begin_deeper
\begin_layout Itemize
\noindent
What encryption is.
\end_layout

\begin_layout Itemize
\noindent
How to set it up.
\end_layout

\begin_layout Itemize
\noindent
How to use it.
\end_layout

\end_deeper
\begin_layout Itemize
Doesn't care.
\end_layout

\begin_layout Itemize
PGP invented in 1991.
 Virtually unknown outside tech circles.
\end_layout

\begin_layout Itemize
HTTPS, on the other hand...
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
The Solution?
\end_layout

\begin_layout Standard
\noindent
\align center
Need a way to provide encryption 
\series bold
WITHOUT
\series default
 impacting the user experience.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Section
Problem Definition
\end_layout

\begin_layout Subsection
Goal
\end_layout

\begin_layout BeginFrame
Goal
\end_layout

\begin_layout Standard
\noindent
\align center
Protect all users, not just those who seek protection.
\end_layout

\begin_layout Standard
\noindent
\align center
Only the user, and any other users they give permission to, get access to
 that user's sensitive data.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Subsection
Threat Model
\end_layout

\begin_layout BeginFrame
Threat Model
\end_layout

\begin_layout Standard
Large-scale breaches of privacy result from compromise of a server/service/servi
ce-operator, not user machines.
\end_layout

\begin_layout Standard
Want to protect against 
\series bold
ANY
\series default
 compromise on the server end, regardless of how or why that compromise
 occurs.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Threat Model
\end_layout

\begin_layout Standard
Sensitive data must be safe, even if the service operator itself is actively
 working against its users.
\end_layout

\begin_layout Standard
By extension:
\end_layout

\begin_layout Itemize
Includes the possibility that the server/service is under the control of
 hackers, intelligence agencies, or any other adversary.
\end_layout

\begin_layout Itemize
Any threats between the service and client (i.e.
 threats to communication).
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Threat Model
\end_layout

\begin_layout Standard
Not appearing in this threat model:
\end_layout

\begin_layout Itemize
Client-side threats
\end_layout

\begin_layout Itemize
Other users
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Subsection
Usability
\end_layout

\begin_layout BeginFrame
Usability Requirements
\end_layout

\begin_layout Standard
Solution must avoid altering user experience, or erecting barriers to uptake.
\end_layout

\begin_layout Itemize
No user-initiated downloads.
\end_layout

\begin_layout Itemize
No installation.
\end_layout

\begin_layout Itemize
No configuration.
\end_layout

\begin_layout Standard
\begin_inset Formula $\Longrightarrow$
\end_inset

 Must be as mass-deployable as the service itself.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Usability Requirements
\end_layout

\begin_layout Standard
\noindent
\align center
Your grandma has to be able to use this.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Section
Solution Overview
\end_layout

\begin_layout BeginFrame
Solution Overview
\end_layout

\begin_layout Itemize
Encrypt all sensitive data on client.
\end_layout

\begin_layout Itemize
Use public/private key-pair to send data to other users.
\end_layout

\begin_layout Itemize
Use password to encrypt all encryption keys.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Solution Overview
\end_layout

\begin_layout Itemize
Store encrypted information and encrypted keys with the service.
\end_layout

\begin_layout Itemize

\series bold
DO NOT
\series default
 store unencrypted information, or unencrypted keys, or password with the
 service.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Solution Overview
\end_layout

\begin_layout Standard
\noindent
\align center
Have service deliver encryption capabilities to the browser, using JavaScript.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Subsection
Problems to be Solved
\end_layout

\begin_layout BeginFrame
Problems To Be Solved
\end_layout

\begin_layout Standard
\noindent
\align center
Encryption via service-delivered JavaScript means service can modify encryption
 code, at any time, without notice.
\end_layout

\begin_layout Standard
\noindent
\align center
Some third party adversary could also change it.
\end_layout

\begin_layout Standard
\noindent
\align center
Prefer this did not happen, or that we could detect it.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Problems To Be Solved
\end_layout

\begin_layout Standard
\noindent
Need a way to check:
\end_layout

\begin_layout Enumerate
Code the client receives is what the service intended to send.
\end_layout

\begin_layout Enumerate
Cryptographic & privacy preserving functions are what user expects to receive.
\end_layout

\begin_deeper
\begin_layout Itemize
Need to standardise!
\end_layout

\end_deeper
\begin_layout Enumerate
The rest of the code isn't violating the user's privacy, nor subverting
 security measures.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Problems To Be Solved
\end_layout

\begin_layout Standard
\noindent
\align center
Can't rely on service to provide method to check.
\end_layout

\begin_layout Standard
\noindent
\align center
Can't rely on all users installing something to check.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Problems To Be Solved
\end_layout

\begin_layout Standard
\noindent
\align center

\series bold
CAN
\series default
 (statistically speaking) rely on 
\emph on
some
\emph default
 users installing something to check.
\end_layout

\begin_layout Standard
\noindent
\align center
Those users can tell others.
\end_layout

\begin_layout Standard
\noindent
\align center
Knowing is half the battle, as not using the service unless/until the problem
 is fixed will keep data safe.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Problems To Be Solved
\end_layout

\begin_layout Standard
\noindent
\align center
How do we actually perform these checks?
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Problems To Be Solved
\end_layout

\begin_layout Standard
\noindent
\align center
How can users exchange data securely, if the service is facilitating the
 exchange?
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Section
Interesting Bits
\end_layout

\begin_layout Subsection
Encryption Scheme
\end_layout

\begin_layout BeginFrame
Encryption Scheme
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename Diagrams/Encrypt.eps
	display false
	width 100col%

\end_inset


\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[fragile]
\backslash
frametitle{Storing Sensitive Information}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For sensitive information present on the page at load time:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},language=HTML,tabsize=4"
inline false
status open

\begin_layout Plain Layout

<div class="sensitive" key="encrypted-local-key-here">
\end_layout

\begin_layout Plain Layout

    Encrypted information here.
 
\end_layout

\begin_layout Plain Layout

</div>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Decrypt on page load.
\end_layout

\begin_layout Standard

\series bold
DON'T
\series default
 decrypt anything not marked as 
\begin_inset Quotes eld
\end_inset

sensitive
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Doesn't have to be a div.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout BeginFrame
Storing Sensitive Information
\end_layout

\begin_layout Standard
For information loaded in after page load, have to ensure 
\end_layout

\begin_layout Itemize
It is tagged as sensitive.
\end_layout

\begin_layout Itemize
Has encrypted key attached
\end_layout

\begin_layout Standard
when it is added to DOM.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Subsection
Checks
\end_layout

\begin_layout BeginFrame
Checks
\end_layout

\begin_layout Standard
Use browser plug-in.
\end_layout

\begin_layout Itemize
Can hook into web-pages, JavaScript files, DOM.
\end_layout

\begin_layout Itemize
Can hook into JavaScript runtime, if need-be.
\end_layout

\begin_layout Itemize
Alerts users if privacy may be violated.
 Stops page running until user chooses what to do.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Check 1
\end_layout

\begin_layout FrameSubtitle
\noindent
\begin_inset Quotes eld
\end_inset

Code the client receives is what the service intended to send
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
Use HTTPS.
 
\end_layout

\begin_layout Itemize
Have the service sign anything it sends with private key.
\end_layout

\begin_layout Itemize
Store public key in certificate.
\end_layout

\begin_layout Itemize
Protects against everything except purposeful compromise by the service.
\end_layout

\begin_deeper
\begin_layout Itemize
Other two checks negate that danger.
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Check 2
\end_layout

\begin_layout FrameSubtitle
\noindent
\begin_inset Quotes eld
\end_inset

Cryptographic & privacy preserving functions are what user expects to receive
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
Roll all these functions into a single JS file.
 Hash it.
\end_layout

\begin_layout Itemize
Store this hash in the plugin itself.
 
\end_layout

\begin_layout Itemize
Check for it on page load.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Check 3
\end_layout

\begin_layout FrameSubtitle
\noindent
\begin_inset Quotes eld
\end_inset

The rest of the code isn't violating the user's privacy, nor subverting
 security measures
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
The hard one! Many different aspects to this.
\end_layout

\begin_layout Standard
Use plugin to parse all JS present at page load.
\end_layout

\begin_layout Standard
And then...
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Check 3
\end_layout

\begin_layout FrameSubtitle
\noindent
\begin_inset Quotes eld
\end_inset

The rest of the code isn't violating the user's privacy, nor subverting
 security measures
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
Check for
\end_layout

\begin_layout Itemize
eval, setTimeout, setInterval
\end_layout

\begin_deeper
\begin_layout Itemize
Allows arbitrary code execution.
\end_layout

\end_deeper
\begin_layout Itemize
Inline JavaScript
\end_layout

\begin_deeper
\begin_layout Itemize
Unpredictable.
\end_layout

\begin_layout Itemize
Don't need it.
\end_layout

\end_deeper
\begin_layout Itemize
Loading of 
\emph on
any
\emph default
 novel external resources (images, CSS, JS files, PDFs).
\end_layout

\begin_deeper
\begin_layout Itemize
Can be used to convey information to the server.
\end_layout

\begin_layout Itemize
All resources need to be loaded at page load.
\end_layout

\end_deeper
\begin_layout Itemize
Messing with the crypto-code.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Check 3
\end_layout

\begin_layout FrameSubtitle
\noindent
\begin_inset Quotes eld
\end_inset

The rest of the code isn't violating the user's privacy, nor subverting
 security measures
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
\noindent
\align center
Perform Taint Analysis on the JavaScript code to detect potential privacy
 violations.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Subsection
Taint Analysis
\end_layout

\begin_layout BeginFrame
Just what the heck is Taint Analysis?
\end_layout

\begin_layout Standard
Taint analysis is a analysis technique.
 
\end_layout

\begin_layout Itemize
Comes in Static and Dynamic flavours.
\end_layout

\begin_layout Standard
Usually used to detect if unsanitised input is ending up somewhere dangerous.
 For example:
\end_layout

\begin_layout Itemize
User input being fed directly to SQL queries.
\end_layout

\begin_layout Itemize
User input being fed directly to exec command.
\end_layout

\begin_layout Standard
We're going to use it to see if sensitive data is being sent anywhere (e.g
 via Ajax call).
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Just what the heck is Taint Analysis?
\end_layout

\begin_layout Standard
To perform taint analysis, you need:
\end_layout

\begin_layout Itemize
Software source-code.
 (Byte-code may suffice).
\end_layout

\begin_layout Itemize
Set of tainted data sources.
 (E.g.
 User input).
\end_layout

\begin_layout Itemize
Set of `taint-sink' functions.
 (Where you don't want tainted data to go).
\end_layout

\begin_layout Itemize
Taint propagation model for the programming language(s) the software is
 written in.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Taint Analysis for JS
\end_layout

\begin_layout Itemize
Source-Code ✔
\end_layout

\begin_layout Itemize
Tainted data-sources
\end_layout

\begin_deeper
\begin_layout Itemize
Any function in the DOM API that could pull decrypted data from the DOM.
\end_layout

\begin_layout Itemize
Decryption functions.
\end_layout

\begin_layout Itemize
Key retrieval functions.
\end_layout

\end_deeper
\begin_layout Itemize
Taint-sink functions
\end_layout

\begin_deeper
\begin_layout Itemize
XML HTTP Requests (a.k.a.
 Ajax calls).
\end_layout

\begin_layout Itemize
Anything else that can be used to communicate.
\end_layout

\end_deeper
\begin_layout EndFrame

\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[fragile]
\backslash
frametitle{Taint Propagation Model}
\end_layout

\begin_layout Plain Layout


\backslash
framesubtitle{Expressions 
\backslash
& Function Calls}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Won't go into complete detail.
 (Long).
\end_layout

\begin_layout Standard
Expressions:
\end_layout

\begin_layout Itemize
If any sub-expression is tainted, whole expression is tainted.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

42 * foo + bar;
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
Function Calls:
\end_layout

\begin_layout Itemize
Any arg tainted, whole call tainted.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

func(arg1, arg2, ...);
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[fragile]
\backslash
frametitle{Taint Propagation Model}
\end_layout

\begin_layout Plain Layout


\backslash
framesubtitle{Assignments}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Expression tainted 
\begin_inset Formula $\implies$
\end_inset

 identifier tainted
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

identifier = expression;
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Can remove taint by assigning untainted expression.
\end_layout

\end_deeper
\begin_layout Itemize
Propagates up objects/arrays, so:
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

foo[i] = x;
\end_layout

\begin_layout Plain Layout

foo.bar = x;
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[fragile]
\backslash
frametitle{Taint Propagation Model}
\end_layout

\begin_layout Plain Layout


\backslash
framesubtitle{References 
\backslash
& Tainted Scopes}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
References
\end_layout

\begin_layout Itemize
Need to track.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var a = {foo: "Hello"}
\end_layout

\begin_layout Plain Layout

var b = a;
\end_layout

\begin_layout Plain Layout

b.foo = taintedEntity;
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
Tainted Scopes:
\end_layout

\begin_layout Itemize
If a block level construct (if, for, while, switch, etc) depends on tainted
 entity, whole scope is tainted.
\end_layout

\begin_layout Itemize
Taint persists after block.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[fragile]
\backslash
frametitle{Taint Propagation Model}
\end_layout

\begin_layout Plain Layout


\backslash
framesubtitle{If Statements}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

if (conditionalExpression) {
\end_layout

\begin_layout Plain Layout

    statementA;
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

} else {
\end_layout

\begin_layout Plain Layout

    statementB;
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
If 
\family typewriter
conditionalExpression
\family default
 tainted, both branches tainted.
\end_layout

\begin_layout Itemize
If not tainted, analyse branches independently.
\end_layout

\begin_layout Itemize
Principles apply to other conditionals (e.g.
 Switch).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[fragile]
\backslash
frametitle{Taint Propagation Model}
\end_layout

\begin_layout Plain Layout


\backslash
framesubtitle{While Statements}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

while (invariant) {
\end_layout

\begin_layout Plain Layout

    statements;
\end_layout

\begin_layout Plain Layout

    ...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
If 
\family typewriter
invariant
\family default
 is tainted, all statements in loop body are tainted.
\end_layout

\begin_layout Itemize
Principle applies to all other loop statements.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[fragile]
\backslash
frametitle{Taint Propagation Model}
\end_layout

\begin_layout Plain Layout


\backslash
framesubtitle{Loop Statements in General}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Need to run taint analysis over loop repeatedly.
\end_layout

\begin_layout Itemize
Stop once taint status has stabilised.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var foo = untainted-entity;
\end_layout

\begin_layout Plain Layout

var bar = untainted-entity;
\end_layout

\begin_layout Plain Layout

while(untainted-condition) {
\end_layout

\begin_layout Plain Layout

    var baz = bar;
\end_layout

\begin_layout Plain Layout

    bar = foo;
\end_layout

\begin_layout Plain Layout

    foo = tainted-entity;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
Don't allow untainting in loop body.
 (Infinite loops).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[fragile]
\backslash
frametitle{Taint Propagation Model}
\end_layout

\begin_layout Plain Layout


\backslash
framesubtitle{With Statements}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Disallow use of 
\family typewriter
with
\family default
 statements under our model.
\end_layout

\begin_layout Itemize
Too difficult to reason about.
\end_layout

\begin_deeper
\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var obj1 = {b: "Hello"};
\end_layout

\begin_layout Plain Layout

var obj2 = {foo: "World"};
\end_layout

\begin_layout Plain Layout

(function (a, b) {
\end_layout

\begin_layout Plain Layout

    with (a) {
\end_layout

\begin_layout Plain Layout

        b = "Goodbye";
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

})(obj1,obj2);
\end_layout

\begin_layout Plain Layout

alert(obj1.b); //alerts "Goodbye"
\end_layout

\end_inset


\end_layout

\end_deeper
\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[fragile]
\backslash
frametitle{Taint Propagation Model}
\end_layout

\begin_layout Plain Layout


\backslash
framesubtitle{Functions}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Functions are complicated.
 Have to deal with:
\end_layout

\begin_layout Itemize
Reference parameters (i.e.
 pointers) being tainted.
\end_layout

\begin_deeper
\begin_layout Itemize
Hard, because JS is untyped.
\end_layout

\begin_layout Itemize
Use object/array notation (a[b] and a.b) to detect.
\end_layout

\end_deeper
\begin_layout Itemize
Parameters tainting each other.
\end_layout

\begin_deeper
\begin_layout Itemize
Assume each parameter is tainted (one at a time)
\end_layout

\begin_layout Itemize
See what else becomes tainted.
\end_layout

\end_deeper
\begin_layout Itemize
Out-of-scope variables.
\end_layout

\begin_deeper
\begin_layout Itemize
Treat them as an implicit parameter.
\end_layout

\end_deeper
\begin_layout Itemize
Return value tainted 
\begin_inset Formula $\implies$
\end_inset

 function itself tainted.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[fragile]
\backslash
frametitle{Taint Propagation Model}
\end_layout

\begin_layout Plain Layout


\backslash
framesubtitle{Functions}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center
Functions get even more complicated.
\end_layout

\begin_layout Standard
\noindent
\align center
Because functions are also objects.
 And objects are functions.
\end_layout

\begin_layout Standard
\noindent
\align center
\begin_inset Graphics
	filename Diagrams/javaScript.jpg
	scale 30

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[fragile]
\backslash
frametitle{Taint Propagation Model}
\end_layout

\begin_layout Plain Layout


\backslash
framesubtitle{Objects}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
If one member of an object is tainted, the whole thing is tainted.
\end_layout

\begin_deeper
\begin_layout Itemize
Becomes way too complicated otherwise.
\end_layout

\end_deeper
\begin_layout Itemize
In other respects, treat like functions.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{frame}[fragile]
\backslash
frametitle{Taint Propagation Model}
\end_layout

\begin_layout Plain Layout


\backslash
framesubtitle{Try-Catch 
\backslash
& Exceptions}
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
Try-Catch-Finally blocks, and Exceptions, are not covered under model.
\end_layout

\begin_layout Itemize
Probably could be, but 'catch-all' nature of 
\family typewriter
catch
\family default
 block makes this complex.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
end{frame}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Making The Model Usable
\end_layout

\begin_layout BeginFrame
Making it Usable
\end_layout

\begin_layout Standard
The above is too restrictive, by itself.
\end_layout

\begin_layout Itemize
Wrap tainted functions to check if reading sensitive data.
\end_layout

\begin_layout Itemize
Don't return sensitive data from these functions.
\end_layout

\begin_deeper
\begin_layout Itemize
Behave normally for regular data.
\end_layout

\end_deeper
\begin_layout Itemize
Unwrapped functions still available.
 (Legitimate uses).
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Data Laundering
\end_layout

\begin_layout Standard
Tainted values could be written to DOM, and read back as untainted values.
\end_layout

\begin_layout Itemize
Wrap DOM-write functions to add 
\begin_inset Quotes eld
\end_inset

sensitive
\begin_inset Quotes erd
\end_inset

 flags, which can be detected by wrapped DOM-read functions.
\end_layout

\begin_layout Itemize
Alert user if tainted value is written via unwrapped function.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Exchanging Sensitive Information
\end_layout

\begin_layout Standard
To send something to another user:
\end_layout

\begin_layout Itemize
Use public key crypto.
\end_layout

\begin_layout Itemize
Need a third-party CA (at least in the plugin), to protect against Man-in-the-Mi
ddle attacks from the service.
\end_layout

\begin_layout Itemize
Could also use web of trust.
\end_layout

\begin_layout Standard
No solution is perfect.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Section
Impact
\end_layout

\begin_layout BeginFrame
Impact
\end_layout

\begin_layout Itemize
Targeted Advertising doesn't really work.
\end_layout

\begin_deeper
\begin_layout Itemize
Same for most business models depending on sensitive user data.
\end_layout

\end_deeper
\begin_layout Itemize
Sets intelligence agencies back to specific, targeted surveillance.
\end_layout

\begin_layout Itemize
No more massive data-theft hacks.
\end_layout

\begin_layout Itemize
Some computational heavy-lifting now on client (indexing, search, etc).
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout BeginFrame
Future Work
\end_layout

\begin_layout Itemize
Taint-Analysis produces a lot of false positives.
\end_layout

\begin_deeper
\begin_layout Itemize
Could be much narrower.
\end_layout

\begin_layout Itemize
Dynamic tainting worth a look.
\end_layout

\end_deeper
\begin_layout Itemize
Needs to be gone over with a fine-tooth-comb.
\end_layout

\begin_layout Itemize
Password Recovery
\end_layout

\begin_layout Itemize
Password still most vulnerable point.
\end_layout

\begin_layout EndFrame

\end_layout

\begin_layout Section
Conclusion
\end_layout

\begin_layout BeginFrame
Conclusion
\end_layout

\begin_layout Standard
\noindent
\align center
That was a gross over-simplification of my thesis.
\end_layout

\begin_layout Standard
\noindent
\align center
Any questions?
\end_layout

\begin_layout EndFrame

\end_layout

\end_body
\end_document
