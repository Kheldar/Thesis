#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Part*
Key Question: Can we make client-side, in-browser encryption viable?
\end_layout

\begin_layout Standard
It is becoming increasingly clear that internet-based services cannot be
 trusted to keep the data their users provide to them private from third
 parties not authorised by the user to have access to such data.
 This is not to say that these services are necessarily untrustworthy (though
 some are), merely that they are unable to protect themselves from compromise
 by criminals, government agencies and even their own employees.
\end_layout

\begin_layout Standard
From a privacy perspective, is is therefore desirable to move control of
 the data from the server to the client.
 If data is encrypted on the client prior to being sent to the server, and
 the decryption keys are not provided to the server, then realistically
 the data cannot be compromised on that front.
\end_layout

\begin_layout Standard
There are a number of ways to achieve client side encryption, but the vast
 majority of them require the user to actively seek out and utilise a method
 of achieving it.
 
\end_layout

\begin_layout Standard
We wish to protect against possible compromise of user data on the server
 end.
 This includes compromise by employees of the service who may have access
 to the servers, hackers who may illegally gain access to the service, and
 intelligence agencies conducting the sorts of mass-surveillance operations
 that have recently been revealed by Edward Snowden, and others.
\end_layout

\begin_layout Standard
A potential model of doing this is for the service to deliver JavaScript
 cryptography code to the user's web-browser, which can then be used to
 encrypt user data prior to it being sent to the server.
 The data could then be decrypted on a client using the corresponding decryption
 key (which the user controls).
 As long as the raw decryption keys are not also transmitted to the server,
 this provides in-principle security against the threats outlined above.
 In practice however, this model has many issues - some related to security,
 others to usability.
\end_layout

\begin_layout Standard
In terms of security, the fact that the server is the one delivering the
 cryptography code opens up the possibility of the code being modified by
 anyone with access to the server.
 It would be relatively trivial to modify the code to scoop up user data
 once it is decrypted on the client, or even to retrieve the decryption
 keys, completely nullifying any privacy gained from encrypting the data.
\end_layout

\begin_layout Standard
From the user's perspective, it is not possible to stop the code from being
 changed.
 However, it is categorically possible to detect that code 
\emph on
has
\emph default
 been changed, and potentially possible to detect whether it has been changed
 in some malicious way
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This is due to the fact that browser-based JavaScript is inherently open-source.
\end_layout

\end_inset

.
 If we can detect such changes, then we have a potential avenue of defence
 against malicious changes of code on the server, and tangentially also
 against changes during transmission (i.e.
 against man-in-the-middle attacks).
\end_layout

\begin_layout Standard
Automated code and/or runtime analysis seems like a dead end.
 The primary sign that code might be doing something malicious - AJAX calls
 and automatic form submissions - are both widely and legitimately used.
 However, it may still be of some use: scripts with calls to 
\family typewriter
eval
\family default

\begin_inset Foot
status collapsed

\begin_layout Plain Layout
A function which executes its parameter.
 It's use is widely discouraged.
\end_layout

\end_inset

 - particularly ones with parameters pulled from a non-user source - are
 quite likely to indicate either malicious intent or an enormous security
 hole.
 Similarly, a script adding new 
\family typewriter
<script>
\family default
 tags to the DOM (or modifying existing ones) may suggest something malicious
 is occurring.
\end_layout

\end_body
\end_document
