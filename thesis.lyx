#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass book
\begin_preamble
\usepackage{url}
\usepackage[palatino]{anuthesis}
\usepackage{graphicx}
\usepackage{makeidx}
\usepackage{xcolor}
\usepackage{epigraph}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language british
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing onehalf
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "basicstyle={\ttfamily},comment={[l]{//}},commentstyle={\color{purple}\ttfamily},identifierstyle={\color{black}},keywords={typeof, new, true, false, catch, function, return, null, catch, switch, var, if, in, while, do, else, case, break, for, each, with},keywordstyle={\color{blue}\bfseries},morecomment={[s]{/*}{*/}},ndkeywords={class, export, boolean, throw, implements, import, this},ndkeywordstyle={\color{darkgray}\bfseries},sensitive=false,stringstyle={\color{red}\ttfamily},xleftmargin=1cm"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Usable Online Privacy:
\begin_inset Newline newline
\end_inset

Browser-Based End-to-End Encryption Delivered by a Service Provider
\end_layout

\begin_layout Author
Joshua Korner-Godsiff - u4685222
\begin_inset Newline newline
\end_inset

Supervised by Roger Clarke
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
thispagestyle{empty}
\end_layout

\begin_layout Plain Layout


\backslash
mbox{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\noindent
\align center

\size larger
This page unintentionally left blank.
\end_layout

\begin_layout Standard
\noindent
\align center
Except for this bit.
 This bit was intentional.
\end_layout

\begin_layout Standard
\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Chapter
Introduction
\end_layout

\begin_layout Standard
In the course of using a web-based service, users will often disclose an
 enormous amount of personal and private information to that service, without
 necessarily realising where that information may ultimately end up, or
 how it may be used.
 Despite the best assurances of these services, their users often have no
 guarantee - legal, technical, or otherwise - that their data will not end
 up in the hands of some third party.
 Such third parties can include anyone from advertising firms, to hackers,
 to government agencies
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Not necessarily the agencies of the user's own government, either.
\end_layout

\end_inset

.
 The means by which they may acquire such data is similarly varied, from
 being willingly handed it by the service operator, to acquiring it illegally
 by compromising the security of the server, to compelling the service operator
 to disclose it via legal means.
 As a result of that final avenue in particular, even if a service is committed
 to protecting the privacy of its users, and takes all reasonable security
 precautions, it logically cannot guarantee its users privacy so long as
 it itself has the ability to access the data.
 In the case of services which are 
\emph on
not
\emph default
 committed to protecting their users, there are even further threats: an
 unscrupulous service provider can hold data to ransom or commit extortion,
 and on the more benign side one could quite deftly manipulate a user's
 behaviour.
 Google is quietly becoming remarkably good at the latter - an Android phone
 can now tell you which roads to drive down, where to eat, and what stocks
 to watch, among many other things.
\end_layout

\begin_layout Standard
Concern over these potential intrusions has been greatly heightened within
 the previous several years.
 The leaks from Edward Snowden 
\begin_inset CommandInset citation
LatexCommand cite
key "PRISM"

\end_inset

 have revealed that the United States' National Security Agency (NSA), and
 Britain's Government Communications Headquarters (GCHQ) have been engaging
 in almost carte blanche surveillance of internet activity.
 They reportedly have access to data related to users of Facebook, Google,
 Microsoft, Apple, Yahoo, and a number of other companies 
\begin_inset CommandInset citation
LatexCommand cite
key "PRISM"

\end_inset

.
 While most such companies have stated that they only turn over data in
 response to a legally binding order or subpoena, it has been alleged that
 the access by intelligence agencies to their data is far more streamlined
 and direct.
\end_layout

\begin_layout Standard
Many other nations' intelligence agencies - notably that of Canada, Australia,
 and New Zealand, which together with the US and Britain makeup the so-called
 
\begin_inset Quotes eld
\end_inset

Five Eyes
\begin_inset Quotes erd
\end_inset

 alliance, but also including that of Austria, India, Netherlands, Russia,
 China, Iran, Syria, and Israel - are all either known or alleged to be
 participating in such activity to varying degrees.
\end_layout

\begin_layout Standard
Of further concern is the reality that companies and other organisations
 can be compelled by a court to turn over their encryption keys 
\begin_inset CommandInset citation
LatexCommand cite
key "LavaBitCourtDocs,WiredLavaBitCryptoKeys"

\end_inset

 to a government, an action which undermines one of the cornerstones upon
 which internet security is based.
 Not only does the possessing of such encryption keys provide access to
 user data, but it also enables a third party to impersonate the service,
 effectively tricking users into believing they are using the real thing,
 when in fact they are using a decoy designed for surveillance.
\end_layout

\begin_layout Standard
Threats to privacy and security from criminal elements also cannot be taken
 lightly.
 In 2013, a hack of the United States branch of the Target corporation resulted
 in around forty million credit-card records, and seventy million records
 of addresses, telephone numbers and other instances of personal information
 ending up in the hands of hackers.
 Moreover, this happened in the face of a security system which allegedly
 detected the security breach as it was in progress, but failed to take
 any action to prevent it 
\begin_inset CommandInset citation
LatexCommand cite
key "Target"

\end_inset

.
 In 2011, hackers breached Sony's PlayStation Network, making off with around
 seventy million customer data records, including names addresses, dates
 of birth, hashed and salted passwords, and security questions 
\begin_inset CommandInset citation
LatexCommand cite
key "PSN"

\end_inset

, forcing the network offline for twenty-four days.
 These hacks are alleged to have cost their respective companies millions
 of dollars, and enabled waves of identity and credit-card fraud, and other
 crimes, and they are far from the only examples of such crimes.
\end_layout

\begin_layout Standard
In the face of such threats to both privacy and security, the questions
 must be asked: What can the average user do to protect themselves against
 such threats? And what can the average company do to protect both themselves
 and their users?
\end_layout

\begin_layout Standard
A potential solution lies in the idea of encrypting all sensitive information
 prior to transmission (for example, in the user's web-browser), and only
 storing the encrypted data on the server
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
That is, do not store passwords, encryption keys, or plain-text data on
 the server.
\end_layout

\end_inset

.
 Under such a model, even if the server or the service operator is completely
 compromised, the private data of the users would remain private, as whomever
 had compromised the server would lack access to the necessary decryption
 keys.
 Such a model has already been adopted (at least in some form) by a number
 of web-based services; examples include Mega.co.nz 
\begin_inset CommandInset citation
LatexCommand cite
key "Mega"

\end_inset

, CryptoCat 
\begin_inset CommandInset citation
LatexCommand cite
key "Crypocat"

\end_inset

 and ProtonMail 
\begin_inset CommandInset citation
LatexCommand cite
key "ProtonMail"

\end_inset

, all of which offer variants on the ideas that will be presented in this
 thesis.
\end_layout

\begin_layout Standard
The idea has the potential to neatly deal with all three primary sources
 of threat to privacy (hackers, advertisers, and government agencies), and
 for the last of those it is all but necessary.
 Server-side encryption, combined with proper security procedures, is generally
 sufficient to mitigate a technical threat from hackers - at least to the
 point where the difficulties of client-side encryption are not worth the
 security gain.
 Legalistic means (either via legislation, or via the service's privacy
 policy) have the potential to remove the possibility of data being handed
 to third parties, although many nations lack sufficient protections to
 make this a reality, and privacy policies may not be sufficiently protective
 (or enforceable).
 
\end_layout

\begin_layout Standard
Governments, on the other hand, can exercise considerable power and influence
 over corporations and other organisations under their jurisdiction
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
I should probably note, at this point, that I don't actually object to governmen
ts being 
\emph on
able
\emph default
 to exercise such power.
 I object to the what they specifically doing with it, and particularly
 the 
\emph on
scope
\emph default
 of what they're doing with it.
 
\end_layout

\begin_layout Plain Layout
It must also be noted that we are not exclusively dealing with western democrati
c governments, who at worst tend to lock people up.
 In less democratic parts of the world, governments having mass-surveillance
 capabilities tends to get people killed.
\end_layout

\end_inset

, forcing them to act in ways they otherwise would not, including circumventing
 their own security measures.
 The government 
\begin_inset Formula $\leftrightarrow$
\end_inset

 corporation power dynamic is not even the only one to have these concerns
 - merely the most obvious one.
 In certain parts of the world, such as Russia, South-East Asia, and Central/Lat
in America, it is quite conceivable that organised crime syndicates could
 exercise a similar degree of leverage over internet companies, and other
 organisations with large amounts of sensitive data.
\end_layout

\begin_layout Standard
In this paper, the fundamentals of a model for performing client-side encryption
 of user-data for web services will be presented.
 The naive version of such a model suffers from a number of serious security
 and usability concerns which (if unsolved) undermine its core purpose;
 we shall therefore address as many of these concerns as possible, and make
 note of the ones which we cannot.
 
\end_layout

\begin_layout Standard
The first concern is that - at least in the case of an HTML+JavaScript based
 web-service - a compromised service could provide malicious code to the
 client, enabling it to retrieve sensitive data and/or decryption keys,
 completely undermining the client-side security mechanisms.
 Solving this in the case of web-applications is particularly difficult
 due to the highly dynamic nature of web-pages and JavaScript.
\end_layout

\begin_layout Standard
Secondly, it is unreasonable to expect that all users of a service would
 be willing, able, know that solutions exist, and care enough to install
 software which ensures protection of their privacy.
 Indeed, possibly the most problematic aspect of many existing privacy-oriented
 pieces of software (a prime example being PGP 
\begin_inset CommandInset citation
LatexCommand cite
key "OpenPGPAlliance"

\end_inset

) is that they set an unfortunately high bar in terms of the required skills
 and knowledge in order to use them effectively, while simultaneously doing
 little to promote their use to the general public.
 Any solution which aims to to provide protection against mass surveillance
 and mass data-theft must provide its protection to as many users as possible,
 and thus must necessarily minimise the barriers to uptake and use.
\end_layout

\begin_layout Standard
Thirdly, many modern web-applications provide the ability for users to share
 data with one another.
 If such data is encrypted, then the encryption keys must be distributed
 to all relevant users in order allow for sharing.
 If the key exchange and distribution is handled by the server, then a compromis
ed server could either decrypt the files en-route (in the case of symmetric
 encryption) or substitute keys belonging to users with ones they control
 (in the case of asymmetric encryption), and neither of these cases would
 be easily detectable by the end-users.
\end_layout

\begin_layout Standard
Fourthly, users must be able to have some certainty that their privacy,
 and the security of their data is being preserved, beyond even the assurances
 provided to them by the providers of the services they use, or the governments
 of the appropriate jurisdictions.
\end_layout

\begin_layout Standard
This paper shall address all of these problems in detail.
 Additionally, we shall make careful note of (though not attempt to solve)
 a number of other problems that arise, including the issues of password
 recovery, shifting application logic and processing to the client, and
 the impact that client-side encryption has on certain popular business
 models.
 **TODO: Make sure I've done this last bit**
\end_layout

\begin_layout Section
Thesis Structure
\end_layout

\begin_layout Standard
Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Problem-Definition"

\end_inset

 will define the terms used throughout this paper, the threat model we seek
 to protect against, as well as the goals and requirements of any solution.
\end_layout

\begin_layout Standard
Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Literature-Review"

\end_inset

 will provide a broad look at the relevant literature and techniques applicable
 to the the problem, as well an examination of how this problem is being
 addressed within the web-services industry, as there seems to be more happening
 on that front than in academia.
\end_layout

\begin_layout Standard
**TODO: Rest of this**
\end_layout

\begin_layout Chapter
Problem Definition
\begin_inset CommandInset label
LatexCommand label
name "chap:Problem-Definition"

\end_inset


\end_layout

\begin_layout Section
Definition of Terms
\end_layout

\begin_layout Standard
We shall firstly define, in as unambiguous a manner as possible, the specific
 meaning of the terms used throughout this document:
\end_layout

\begin_layout Standard
**TODO: Work out if I actually want to limit this to the WWW.**
\end_layout

\begin_layout Standard
**TODO: Change some of these to what Roger suggested?**
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\noindent
\align block

\series bold
Web-Service
\series default
 A piece of software, or collection of pieces of software, which provide
 a service to end users, specifically via the world-wide-web.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\noindent
\align block

\series bold
Web-Service
\begin_inset space ~
\end_inset

Provider
\series default
 A company or other organisation responsible for the operation of a web-service.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\noindent
\align block

\series bold
Server
\series default
 The hardware and underlying software stack (OS, web server, database server,
 etc) upon which the `server-side' portion of a web-service runs.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\noindent
\align block

\series bold
User
\series default
 A person who uses a web-service.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\noindent
\align block

\series bold
Client
\series default
 The hardware and underlying software stack that a user uses to access and
 interact with a web-service.
 In applicable cases, includes the browser.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
\noindent
\align block

\series bold
Browser
\series default
 A piece of software capable of interpreting HTML, CSS, and JavaScript,
 and other relevant data in order to render an holistic web page.
 For our purposes, it is assumed to run on the client, and is used by a
 user.
 Examples include Firefox, Chrome, Internet Explorer, Safari, and Opera.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
Sensitive
\begin_inset space ~
\end_inset

Data
\series default
 Data belonging to and/or originating from the user, and which the user
 would prefer to be kept private, and/or which could exploited to the user's
 detriment if it were in the hands of a third party.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000

\series bold
Service
\begin_inset space ~
\end_inset

Critical
\begin_inset space ~
\end_inset

Data 
\series default
Data without which a web-service is logically unable to perform its intended
 function.
 Examples include search terms for a search engine, and the address field
 in an email.
\end_layout

\begin_layout Standard
\begin_inset Quotes eld
\end_inset

Web-Service
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

Web-Service Provider
\begin_inset Quotes erd
\end_inset

 will sometimes be shortened to simply 
\begin_inset Quotes eld
\end_inset

Service
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

Service Provider
\begin_inset Quotes erd
\end_inset

 throughout this text.
\end_layout

\begin_layout Section
Goal
\end_layout

\begin_layout Standard
The overarching goal of this paper is to define a model under which the
 sensitive data that a user supplies to a web-service 
\emph on
cannot
\emph default
, as a result of supplying it to the service, fall into the hands of any
 party to whom the user has not granted access.
\end_layout

\begin_layout Standard
It is preferable that this goal be achievable without the user's active
 participation in achieving it.
 That is to say, the aim is that all users receive protection, regardless
 of whether or not they seek it.
 The reasoning behind this particular constraint is the observation that
 while there exist a great many services and technologies which allow users
 to protect their privacy and data, almost all them require active participation
 on the part of the user to do so - for example by downloading, installing,
 and/or configuring some specific piece of software - which can present
 a significant barrier to uptake.
 This is in contrast to the vast majority of highly successful websites,
 such as Facebook, Google, YouTube, Amazon, eBay, Wikipedia, Twitter, and
 indeed most other popular sites 
\begin_inset CommandInset citation
LatexCommand cite
key "AlexaTop500"

\end_inset

, where the most significant barrier to uptake is the sign-up form.
 If online privacy is to become at all ubiquitous, it is imperative that
 it is not difficult to acquire and use.
\end_layout

\begin_layout Standard
Furthermore, we seek to allow users to verify that they are receiving such
 protections.
 In the case of those users who do not wish to verify it, or who lack the
 technical competency to verify it, we rely on the existence of other users
 who do perform the verification.
 In essence, we seek to create a digital version of the concept of herd
 immunity, whereby those users who verify their own protection by extension
 provide some measure of protection to those who do not, under the assumption
 that the service or any third party is unable to tell the two apart.
\end_layout

\begin_layout Section
Threat Model
\begin_inset CommandInset label
LatexCommand label
name "sec:Threat-Model"

\end_inset


\end_layout

\begin_layout Standard
Here we will define the specific range of threats that we seek to protect
 against.
 Many of these threats are interrelated in some way, and therefore the threats
 cannot be considered in isolation to one another.
\end_layout

\begin_layout Subsection
Web-Service Provider Compromise
\end_layout

\begin_layout Standard
It is assumed to be possible for a third party to either convince or compel
 the service provider to disclose arbitrary sensitive data that it possesses.
\end_layout

\begin_layout Standard
Additionally, it is assumed to be possible for a third party to convince
 or compel the service provider to alter the operation of the service, in
 any way, resulting in the web service being compromised.
 This includes, but is not limited to the disclosure of the service-provider's
 own encryption keys and security certificates, if any, to the third party.
\end_layout

\begin_layout Standard
The consequence of these assumptions is that any sensitive data that the
 service provider possesses cannot be assumed to be secure, even if the
 service provider has encrypted it with their own keys.
\end_layout

\begin_layout Standard
We do not generally assume that the service provider 
\emph on
itself
\emph default
 is acting against the privacy interests of its users - on the basis that
 any service provider which sets out to protect its users privacy is unlikely
 to back-flip on that decision.
 However, it is still a possibility, and presents identical threats to the
 above.
 Because it presents identical threats to the above, it is also solved by
 any solution to the above.
\end_layout

\begin_layout Subsection
Web Service Compromise
\end_layout

\begin_layout Standard
It is assumed to be possible for a third party to arbitrarily alter the
 operation of the web service software, either by modifying the code which
 runs upon the web server, or by modifying the code which is sent to the
 client.
 This could be made possible by compromising the service provider, or by
 compromising the server, or by compromising the transmission medium; however,
 which of those vectors is used is not relevant.
\end_layout

\begin_layout Standard
The consequence of this assumption is that the operation of the service
 - including any parts of that software which are sent to the client - may
 not be that which either the service operator or the user expect it to
 be, and may in some way be malicious.
\end_layout

\begin_layout Subsection
Server Compromise
\end_layout

\begin_layout Standard
It is assumed to be possible for a third party to gain full control of the
 server(s), and all software operating upon it.
\end_layout

\begin_layout Standard
The consequence of this assumption is that the third party may then compromise
 the web service.
 It may also acquire any sensitive data stored on the server(s).
\end_layout

\begin_layout Subsection
Client Compromise
\end_layout

\begin_layout Standard
For the purposes of our threat model, it is assumed that the user's own
 machine is 
\emph on
not
\emph default
 compromised by a third party.
 Protecting against that possibility is beyond the scope of what this thesis
 is trying to accomplish; moreover, in the event that the user's machine
 is compromised, any attempt to protect sensitive data created on that machine
 is essentially moot, anyway.
\end_layout

\begin_layout Standard
Similarly, we do not seek to protect against the actions of other users,
 or what may occur on the machines of other users.
 In particular, it is possible that a user might convey sensitive information
 to another user, who then discloses it.
\end_layout

\begin_layout Subsection
Transmission Layer Compromise
\end_layout

\begin_layout Standard
It is assumed that communications between the client and server may be both
 intercepted and modified by a third party, including in the case where
 the connection is encrypted (e.g.
 by TLS/SSL).
 This is largely an extension of the possibility that the server/service
 could be compromised, or the service provider's encryption keys could be
 discovered.
\end_layout

\begin_layout Standard
For sanity's sake, we will not assume that the entire TLS/SSL system is
 broken
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Recent bugs in OpenSSL to the contrary.
\end_layout

\end_inset

, since if that is gone, the internet has vastly bigger problems than what
 we are attempting to address here.
 
\end_layout

\begin_layout Subsection
Threat Model Summary
\end_layout

\begin_layout Standard
We assume that the server; any software running upon it, including the service
 itself; and the service provider as an organisation may be compromised.
 We seek to ensure that even under this eventuality, the confidentiality
 of sensitive data is not compromised.
\end_layout

\begin_layout Standard
It must be noted that it is not assumed that the service provider sets out
 to create a service which intentionally distributes sensitive data, although
 that is to some extent covered under the threat model.
 Instead, we assume that the initial intention of the service provider is
 to create a service which preserves the confidentiality of sensitive data,
 but that some third party - or indeed, the service provider itself - may
 attempt to subvert this intention further down the road.
\end_layout

\begin_layout Standard
While we seek to provide users with the ability to verify that their privacy
 and data are being protected, such a guarantee can only be provided to
 those users willing and able to verify it.
 Those users who are not willing or able will have to suffice with the assurance
s of the service, and the fact that those users who do perform such verification
 have not detected any violations.
\end_layout

\begin_layout Standard
In essence, we do not trust in the security of any unencrypted data which
 leaves the client.
\end_layout

\begin_layout Section
Requirements
\end_layout

\begin_layout Standard
As per the threat model (§
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Threat-Model"

\end_inset

), the server and/or the web-service provider is the primary vector through
 which third parties may acquire sensitive data.
 Some means of acquiring such data - particularly legal means - cannot be
 defended against by technical measures if the service has the capability
 to read the data.
 Given this, we require a model under which neither the web-service software,
 nor the server upon which it operates, nor the service provider have the
 capability to gain access to the content of a user's sensitive data.
\end_layout

\begin_layout Standard
Additionally to this, we seek to ensure that compromise of the server, the
 web-service software, or the operations of the service provider by any
 third party, in any way, does not jeopardise our ability to guarantee that
 sensitive data will not end up in the hands of a third party.
\end_layout

\begin_layout Standard
An exception is made in the case of service critical data.
 Even if such data is sensitive, if the user does not supply the data in
 a readable form to the service, then the service cannot perform its function.
 We therefore leave protection of such data entirely to the user, in the
 form of their choice of whether or not to utilise the service.
\end_layout

\begin_layout Standard
Insofar as possible, the user should not be 
\emph on
required
\emph default
 to be aware that anything is being done to protect their data; particularly
 they should not be required to be aware of, nor participate in any of the
 technicalities of protecting their data, beyond what is normal for a web
 service (for example, using a password).
\end_layout

\begin_layout Chapter
Literature Review
\begin_inset CommandInset label
LatexCommand label
name "chap:Literature-Review"

\end_inset


\end_layout

\begin_layout Section
Previous/other work in the area
\end_layout

\begin_layout Standard
While there has certainly been work related to many of the individual aspects
 presented in this paper, with one exception there appears to be a dearth
 of academic literature on the topic as a whole.
\end_layout

\begin_layout Standard
That exception is a paper entitled 
\begin_inset Quotes eld
\end_inset

Building web applications on top of encrypted data using Mylar
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "Mylar"

\end_inset

, which contains a 
\emph on
substantial
\emph default
 overlap with the work presented here
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
It must be noted that the paper was only published in April 2014 (i.e.
 4/5ths of the way through this project), leaving insufficient time to significa
ntly diverge the two.
\end_layout

\end_inset

.
 In particular, it presents a model 
\begin_inset Quotes eld
\end_inset

to protect data confidentiality in a wide range of web applications against
 arbitrary server compromises,
\begin_inset Quotes erd
\end_inset

 which is equivalent to the goals of this paper, and it reaches many of
 the same conclusions.
 The paper covers four main areas: an architecture for protecting users'
 sensitive data, the sharing of sensitive data between users, the verification
 of application code, and computation over encrypted data.
 In this paper, we shall cover only the first three
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
The fourth requiring substantially more mathematical knowledge than I possess.
\end_layout

\end_inset

, and reach markedly different conclusions on the third.
\end_layout

\begin_layout Subsection
Data Tainting
\end_layout

\begin_layout Standard
Data tainting - sometimes also called taint checking - is a well established
 method of analysing a program to determine which aspects of it are influenced
 by user input, or other external data sources 
\begin_inset CommandInset citation
LatexCommand cite
key "sabelfeld2003InformationFlowSecurity"

\end_inset

.
 Traditionally, it is used as a means to detect vulnerabilities in the program;
 for example, it can be used to determine if user input (or some derivative
 thereof) is being fed directly to a SQL database, or as a command to an
 operating system.
 However, the same technique may be used to determine if data derived from
 an HTML DOM is being fed into an AJAX request via JavaScript, which is
 a use-case we are far more interested in.
\end_layout

\begin_layout Standard
To perform taint checking on a piece of software requires four distinct
 things:
\end_layout

\begin_layout Enumerate
The software's source-code (or some other representation we may reason about,
 such as its byte-code).
\end_layout

\begin_layout Enumerate
A set of initially tainted data sources - traditionally, this is anything
 which may contain unsanitised user input.
\end_layout

\begin_layout Enumerate
A taint propagation model for the particular programming language(s) that
 the software is written in, that is used to which determine data paths
 through the program are (or at least may be) tainted.
\end_layout

\begin_layout Enumerate
A set of `taint-sink' functions - that is, functions for which we do not
 wish to have tainted data as input(s).
\end_layout

\begin_layout Standard
Data tainting in JavaScript (which we are specifically interested in) has
 a somewhat sketchy history.
 Versions 3 and 4 of Netscape Navigator provided in-browser support for
 the concept, albeit for quite specific security purposes.
 This support was extended to some versions of Internet Explorer and Opera,
 but the overall feature was deprecated in JavaScript 1.2, and is no longer
 officially supported in any major browser 
\begin_inset CommandInset citation
LatexCommand cite
key "W3SchoolsTaintEnabled"

\end_inset

.
\end_layout

\begin_layout Standard
There are plenty of more modern attempts at implementing some form of taint
 analysis for JavaScript 
\begin_inset CommandInset citation
LatexCommand cite
key "Bloomgarden2012dataflow,DataTaintingJS,DataTainting,BlendedTaintAnalysisJS"

\end_inset

.
 All but one 
\begin_inset CommandInset citation
LatexCommand cite
key "LaBaSec"

\end_inset

 of those encountered while researching this paper used a dynamic analysis
 approach - that is, they analysed the application as it was running, and
 only analysed those data paths which were actually executed.
 This is in contrast to the concept of static analysis, which analyses a
 program's source code before it is run, and examines all control flow paths.
 The former is more precise, and carries more computational overhead, while
 the latter is more thorough, and in principle easier to implement.
\end_layout

\begin_layout Subsection
Cryptography & Storing Sensitive Data
\end_layout

\begin_layout Standard
**TODO: Reference this section**
\end_layout

\begin_layout Standard
Cryptography is a well established field of mathematics, dealing chiefly
 with methods of securing information, such that only those who are authorised
 to do so may discover the contents of said information.
\end_layout

\begin_layout Standard
Briefly, information may be encrypted using a combination of an appropriate
 mathematical algorithm (e.g.
 AES 
\begin_inset CommandInset citation
LatexCommand cite
key "AES"

\end_inset

, Blowfish 
\begin_inset CommandInset citation
LatexCommand cite
key "Blowfish"

\end_inset

, and RSA
\begin_inset CommandInset citation
LatexCommand cite
key "RSA"

\end_inset

), and an encryption key - typically a number large enough that an attacker
 cannot feasibly try all possible numbers.
 The information (termed cleartext) and key are used as inputs to the algorithm,
 in order to produce cyphertext (that is, unreadable gibberish).
 
\end_layout

\begin_layout Standard
In order to turn the cyphertext back into cleartext, the cyphertext is used
 as input into the decryption algorithm corresponding to the encryption
 algorithm which was used to generate the cyphertext, along with a decryption
 key.
 The decryption function is typically some form of reversal of the operations
 performed in the encryption algorithm, while the decryption key may either
 be the same as the encryption key (termed a symmetric key), or another
 number which is mathematically related to the encryption key (termed an
 asymmetric key).
\end_layout

\begin_layout Standard
In modern use, the encryption and decryption algorithms are typically public
 knowledge - largely on the basis that by exposing them to many trained
 mathematicians, any flaws are more likely to be discovered and fixed.
 The keys on the other hand, should always be kept secret, being made available
 only to those whom the encrypting party wishes to grant access to the encrypted
 information.
 It should be noted that since the keys are numbers, anyone may generate
 their own keys to use with the algorithm, assuming they know how to generate
 numbers with the specific properties required.
 The most common desired properties are 
\end_layout

\begin_layout Enumerate
That the number is very large - typically 128 bits or more for symmetric
 keys, and 1024 bits or more for asymmetric keys.
\end_layout

\begin_layout Enumerate
That the number is either prime, or has a highly probability of being prime.
\end_layout

\begin_layout Enumerate
That the number cannot be easily guessed by a means other than brute-force
 analysis - this is typically satisfied by choosing a random number.
\end_layout

\begin_layout Standard
Encryption is most commonly used to allow the secure transfer of information
 between two parties, while ensuring that no third party who may have intercepte
d the information is able to read it.
 However, it is equally possible to encrypt information, and then safely
 store it with a potentially untrusted third party for later decryption
 by the encrypting party.
 Both of these uses are of interest to us.
\end_layout

\begin_layout Subsection
Public Key Cryptography
\end_layout

\begin_layout Standard
Public key cryptography 
\begin_inset CommandInset citation
LatexCommand cite
key "DiffieHellman,HandbookAppliedCrypto"

\end_inset

, sometimes also known as asymmetric cryptography, is a particular type
 of cryptography almost exclusively used for sharing information.
 It functions by generating not one but two cryptographic keys, typically
 termed a key-pair.
 When combined with their associated cryptographic algorithm - for example,
 RSA 
\begin_inset CommandInset citation
LatexCommand cite
key "RSA"

\end_inset

 - these keys have the property that each may be used to decrypt what they
 other encrypts.
 However, they may 
\emph on
not
\emph default
 be used to decrypt what they themselves have encrypted.
\end_layout

\begin_layout Standard
The most important result of this (at least for our purposes) is that one
 can safely distribute or otherwise publish one of these keys (termed the
 public key), and keep the other key (termed the private key) secret.
 Other people may then encrypt messages using the public key, and only the
 holder(s) of the private key may decrypt them.
 Similarly, any message encrypted using the private key is guaranteed to
 have come from the holder of the private key - assuming that key is held
 securely.
\end_layout

\begin_layout Subsection
End to End Encryption
\end_layout

\begin_layout Standard
**TODO: Ref this section**
\end_layout

\begin_layout Standard
End-to-end encryption, sometimes also called client-side encryption, is
 a technique whereby information is encrypted by one party, communicated
 to a second party who possesses the capability to decrypt it, and at no
 point between the initial encryption and the final decryption does any
 third party - whether they are assisting the communication or intercepting
 it - possess the capability to read the message.
 More simply, the message may only be read at either end of the transmission,
 hence the name.
\end_layout

\begin_layout Standard
Several points must be made with regard to end-to-end encryption.
 Firstly, that the communication between the two parties may be asynchronous;
 that is, the encrypted information may be held for an arbitrary amount
 of time by an intermediary third party (which is presumably helping to
 facilitate the communication) before being finally transmitted to the second
 party; there is no requirement that the first and second party are ever
 come into direct contact with one another during the communication.
\end_layout

\begin_layout Standard
The second point is that the first and second parties may in fact be the
 
\emph on
same
\emph default
 party.
 That is, it is entirely reasonable that one might encrypt some information,
 send it a third party for storage, and later retrieve it for decryption.
\end_layout

\begin_layout Standard
Thirdly, that while the contents of the messages are a secret, the sender
 and recipient are not, as any intermediaries must know where to send the
 message in order to send it.
 There exist methods of anonymising the sender and receiver (e.g.
 TOR 
\begin_inset CommandInset citation
LatexCommand cite
key "TOR"

\end_inset

), but those will not be dealt with in this thesis.
\end_layout

\begin_layout Standard
End-to-end already encryption enjoys fairly widespread use among security
 conscious people and organisations.
 However, one of the overriding themes of most implementations of end-to-end
 encryption is that the software facilitating it is already deployed to
 both the sending and receiving parties prior to any encrypted communication
 taking place, and that these deployments are wholly controlled by the two
 parties.
 There are very good reasons for using such a model - pre-deployment and
 total control enormously simplify a lot of security concerns surrounding
 end-to-end encryption.
\end_layout

\begin_layout Subsection
Key Exchange Problem
\end_layout

\begin_layout Standard
Many web-services provide functionality whereby information - including
 potentially sensitive information - can be shared between users
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Facebook and email being examples
\end_layout

\end_inset

.
 If we wish to hide such data from all the intermediaries between the users
 - including the server - then it becomes necessary to encrypt the data.
 The question then becomes: how do we distribute the decryption keys to
 the user(s) at the other end?
\end_layout

\begin_layout Standard
The so-called 
\begin_inset Quotes eld
\end_inset

key exchange problem
\begin_inset Quotes erd
\end_inset

 is a well trodden area of cryptography and security.
 The Diffie-Hellman key-exchange algorithm 
\begin_inset CommandInset citation
LatexCommand cite
key "DiffieHellman"

\end_inset

 provides a generally sound method of exchanging keys; however, it suffers
 from two flaws which are critical to our application:
\end_layout

\begin_layout Itemize
It fails to provide a method for one user to authenticate the identity of
 another.
\end_layout

\begin_layout Itemize
It assumes that even if the channel by which keys are exchanged is monitored,
 it may not be tampered with by a third party (i.e.
 the channel is not vulnerable to an man-in-the-middle attack).
\end_layout

\begin_layout Standard
The second flaw is a particular problem in our case, since the server necessaril
y facilitates communication between users, and it is assumed to be compromised.
\end_layout

\begin_layout Standard
There exists a number of methods which attempt to mitigate this problem.
 The most prominent is the idea of a centralised public key infrastructure
 (PKI) 
\begin_inset CommandInset citation
LatexCommand cite
key "OpenPGP"

\end_inset

.
 Under a PKI scheme, a central entity known to all users - generally termed
 the certificate authority (CA) - maintains a binding between public keys
 and the identifies of the user(s) to which they belong.
 The public keys of the CA are distributed along with any software that
 uses it, allowing the software to establish a secure connection between
 itself and the CA.
 This in turn allows such software to both look up the public key belonging
 to a particular identity, and to verify that a particular public key does
 in fact belong to a particular identity.
\end_layout

\begin_layout Standard
The downside of a centralised PKI is that it requires trust in the CA.
 While this is not necessarily a bad thing - most secure communications
 on the internet work on this basis - it is still not ideal.
\end_layout

\begin_layout Standard
There also exists the concept of a 
\emph on
de
\emph default
centralised PKI, often termed a 
\begin_inset Quotes eld
\end_inset

web of trust
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "OpenPGP"

\end_inset

.
 Under such a scheme, the users themselves issue certificates binding their
 public keys to their identity.
 These certificates are then signed by other users, based on whether or
 not they trust the certificate to be valid.
 Given sufficient users signing each others' keys, one user may establish
 the identity and public key of another user based on who signs their certificat
e, and who in turn signs 
\emph on
those
\emph default
 users' certificates, and so forth down the chain until the first user encounter
s enough users whom they trust to accurately sign certificates.
\end_layout

\begin_layout Standard
Like most decentralised systems, web of trusts do not actually preclude
 working with a central authority, provided most people in the system trust
 that authority.
 The downside to web of trust systems is that they can be considerably more
 difficult to set up and maintain than a centralised one.
\end_layout

\begin_layout Subsection
In-Browser Cryptography
\end_layout

\begin_layout Standard
**TODO: Ref**
\end_layout

\begin_layout Standard
Of particular interest is the idea of supplying encryption and decryption
 functionality within a web-browser, or other similar software such as an
 HTML-enabled email client.
 There are many ways in which this could be (and to some degree already
 has been) accomplished.
\end_layout

\begin_layout Standard
Firstly, there is the idea of supplying cryptographic functionality via
 a specialist library or piece of software, through which all communications
 are piped.
 From a purely technical perspective, this is the preferred option.
 Its chief benefit is that the software is installed on the client, and
 cannot in any way be meddled with by a third party, except by compromising
 the client itself.
 Additionally, such an approach has full access to the underlying operating
 system, and thus easy access to things such as high-quality sources of
 high entropy, and security supportive hardware.
 This is the approach that SSL has taken, and it has achieved great success
 in doing so - though a large part of that success is due to the fact that
 it is comes packaged with most web-browsers.
 In order to have similar success, any such approach would likely 
\emph on
also
\emph default
 have to be packaged with the browser, as otherwise it is unlikely to receive
 widespread uptake, and therefore would not be particularly useful to a
 service seeking to utilise it.
\end_layout

\begin_layout Standard
A second approach is the notion of a browser plugin.
 This also has the benefit of being installed on the client, but with the
 drawback that plugins tend to be heavily sandboxed by the browser, thus
 keeping them away from the underlying operating system.
 It suffers from the same problem as specialist software, in that it needs
 broad uptake to be particularly useful, and it is less likely to achieve
 that if the user must specifically install it.
 One advantage to using a plugin over specialist software is that a plugin
 generally has much more direct access to the browser's resources, potentially
 including the JavaScript runtime and DOM of arbitrary pages.
 This can greatly assist in providing secure cryptographic operations to
 the browser.
\end_layout

\begin_layout Standard
A third approach is the idea of an on-demand download.
 Under this approach, code to perform cryptographic operations is loaded
 onto the client from an external source whenever there is - or may be -
 a need for it.
 This has the potential to very neatly sidestep the issues of uptake and
 usability.
 However, it suffers from the very serious security issue of having cryptographi
c code originate from an external source.
 Additionally, in the specific case of web-browsers, the only way to deliver
 such code would be via JavaScript, which presents its own litany of security
 issues.
\end_layout

\begin_layout Standard
The third option is actually very promising, and is the one investigated
 within this thesis.
 The first two have been tried - to varying degrees of success - but the
 only solutions to achieve widespread use are the ones which come with the
 software that uses them, and do not require active user involvement to
 function.
 The third option at least potentially has both of those properties, if
 the security issues can be solved.
 In any case, given a choice between trying to solve the security issues
 related to using cryptographic code from an external source in JavaScript,
 and trying to convince and educate the general public to use encryption,
 the former is quite probably easier.
\end_layout

\begin_layout Subsection
Cryptography in JavaScript
\end_layout

\begin_layout Standard
Historically, encryption in JavaScript (the de facto scripting language
 of web-browsers and related software) has been quite problematic, because
 JavaScript has until quite recently lacked a cryptographically secure random
 number generator.
 This meant that developers either had to use JavaScript's 
\family typewriter
Math.random()
\family default
 function (which is not cryptographically secure), or use Java applets,
 or a plugin, or to generate the number elsewhere (e.g.
 on the server) and send it to the client, all of which have their own associate
d problems.
\end_layout

\begin_layout Standard
JavaScript now possesses the 
\family typewriter
window.crypto.getRandomValues()
\family default
 function, which in principle provides cryptographically secure random number
 generation.
 It is still 
\begin_inset Quotes eld
\end_inset

in principle
\begin_inset Quotes erd
\end_inset

 because of two issues: firstly, the technology (and the associated W3C
 specification) is still in development.
 At time of writing the function is supported by all major desktop browsers
 (Chrome, Firefox, IE, Opera, and Safari) and 
\emph on
some
\emph default
 mobile browsers (Chrome, and Firefox) 
\begin_inset CommandInset citation
LatexCommand cite
key "MozGetRandomValues"

\end_inset

, and it is anticipated that support will continue to spread.
\end_layout

\begin_layout Standard
The second issue is that the technology relies on the browser to provide
 good sources of entropy, and these sources are 
\emph on
not
\emph default
 defined in the specification.
 Specifically:
\end_layout

\begin_layout Quotation

\shape slanted
\begin_inset Quotes eld
\end_inset

Implementations should generate cryptographically random values using well-estab
lished cryptographic pseudo-random number generators seeded with high-quality
 entropy, such as from an operating-system entropy source (e.g., "/dev/urandom").
 This specification provides no lower-bound on the information theoretic
 entropy present in cryptographically random values, but implementations
 should make a best effort to provide as much entropy as practicable.
\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "W3CWebCryptoAPI"

\end_inset


\end_layout

\begin_layout Standard
The result is that while browsers 
\emph on
should
\emph default
 provide cryptographically random values, there's no real guarantee that
 they are doing so.
 However, it is still the best option available in JavaScript, and notably
 better than Math.random().
\end_layout

\begin_layout Subsection
AJAX
\end_layout

\begin_layout Standard
AJAX - short for 
\series bold
A
\series default
syncronous 
\series bold
J
\series default
avascript 
\series bold
A
\series default
nd 
\series bold
X
\series default
ML, and sometimes also called XHR, short for 
\series bold
X
\series default
ML 
\series bold
H
\series default
TTP 
\series bold
R
\series default
equest - is a well-established technique for performing communications between
 a JavaScript runtime and a server capable of responding to HTTP requests.
 It is one of the few ways in which a JavaScript runtime running in a browser
 can communicate with the outside world.
 It forms the basis of many modern web applications, due to its ability
 to exchange data with a server after page load 
\begin_inset CommandInset citation
LatexCommand cite
key "AJAX"

\end_inset

.
\end_layout

\begin_layout Section
Industry Review
\end_layout

\begin_layout Standard
Despite persistent searching, there nevertheless seems to exists a dearth
 of academic literature on some of the topics covered in this paper.
 It was the activity of the internet-application industry which first led
 me to investigate the possibility of end-to-end encryption in a browser,
 and the industry does 
\emph on
not
\emph default
 seem to lack interest or activity in this area - particularly since the
 Edward Snowden leaks 
\begin_inset CommandInset citation
LatexCommand cite
key "PRISM"

\end_inset

.
 Mega, CryptoCat, ProtonMail, and a host of enterprises are all attempting
 to supply a range of private services
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
A simple Google search for 
\begin_inset Quotes eld
\end_inset

Private <class of service>
\begin_inset Quotes erd
\end_inset

 will tend to turn these up
\end_layout

\end_inset

.
 Because of this, it seems prudent to touch on the major points of interest
 that exist on the industrial side, and from less traditional sources.
\end_layout

\begin_layout Subsection*
MEGA
\end_layout

\begin_layout Standard
Mega.co.nz has created a file storage/sharing service which attempts to ensure
 privacy by using in-browser end-to-end encryption.
 It encrypts the files it stores using randomly generated symmetric keys.
 These keys are in turn encrypted with a symmetric master key, which is
 itself encrypted using a hash derived from the user's password.
 This allows the encryption keys to be stored on the company's servers without
 actually disclosing them.
 
\begin_inset CommandInset citation
LatexCommand cite
key "MegaDoc"

\end_inset


\end_layout

\begin_layout Standard
Additionally, each user's account has an RSA key pair associated with it.
 The private portion is encrypted with the symmetric master key, allowing
 it to also be stored on the server.
 The key pair is used to allow users to exchange files, and also for authenticat
ion.
 
\begin_inset CommandInset citation
LatexCommand cite
key "Mega"

\end_inset


\end_layout

\begin_layout Standard
Mega identifies three large-scale security vulnerabilities with respect
 to their service 
\begin_inset CommandInset citation
LatexCommand cite
key "MegaSecurityAndPrivacy"

\end_inset

.
\end_layout

\begin_layout Itemize
A man-in-the-middle attack, involving 
\begin_inset Quotes eld
\end_inset

issuing a valid duplicate SSL certificate in combination with DNS forging
 and/or attacks on our BGP routes
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Itemize
A third party gaining access to the servers hosting https://mega.co.nz/index.html,
 and replacing that file with a forged version.
\end_layout

\begin_layout Itemize
A third party gaining access to their servers, and creating forged key requests
 for existing data shares.
\end_layout

\begin_layout Standard
They claim that the latter two vulnerabilities are detectable in the client.
\end_layout

\begin_layout Subsection*
CryptoCat
\end_layout

\begin_layout Standard
**TODO: This.
 Maybe.
 If have time.**.
\end_layout

\begin_layout Subsection*
Criticisms of JavaScript-based Encryption
\end_layout

\begin_layout Standard
Matasano Security offers a number of valid (and not so valid) criticisms
 of JavaScript based cryptography 
\begin_inset CommandInset citation
LatexCommand cite
key "MatasanoJSCryptoHarmful"

\end_inset

.
 Their main concern is what they term the 
\begin_inset Quotes eld
\end_inset

chicken-egg problem
\begin_inset Quotes erd
\end_inset

 of a service delivering crypto code to the browser.
 They argue that if you cannot trust a network to deliver a password, or
 do not trust a server to keep a user's secrets, then you cannot trust that
 same server or network to deliver security code.
\end_layout

\begin_layout Standard
This is indeed one of the most substantial problems blocking widespread
 uptake of the idea.
 However, it may not be insurmountable.
 The network-delivery problem (as they readily admit) can be solved using
 TLS/SSL.
 Trusting the code that is delivered is another matter, and requires finding
 some way to verify that what is being delivered is both the correct code
 (i.e.
 unmodified by some third party), and not itself malicious.
\end_layout

\begin_layout Standard
Another substantial criticism they level is the lack of a cryptographically
 secure RNG in JavaScript.
 However, this problem has been solved (or at least, is in the process of
 being solved) by 
\family typewriter
window.crypto.getRandomValues
\family default
() 
\begin_inset CommandInset citation
LatexCommand cite
key "MozGetRandomValues"

\end_inset

.
\end_layout

\begin_layout Standard
They also claim that the 
\begin_inset Quotes eld
\end_inset

view-source transparency is illusory
\begin_inset Quotes erd
\end_inset

.
 That is, that the inherently open-source nature of browser-executed JavaScript
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
All browsers that I am aware of provide a tool to view the source-code.
\end_layout

\end_inset

 does not actually help, since even a skilled cryptographer would have difficult
y determining if a given piece of JavaScript code is secure - particularly
 due to JavaScript's malleable runtime environment.
 While this is partially correct, it is also disingenuous - the benefit
 of view-source transparency is that a person can read the code, and 
\emph on
know
\emph default
 that it is the same code being executed in the browser - something which
 is very difficult to impossible with compiled binaries 
\begin_inset CommandInset citation
LatexCommand cite
key "ThoughtsOnJSCrypto"

\end_inset

.
 The result is that analysis and verification of the code - both by automated
 tools and by third-parties - is possible, particularly if some of the malleabil
ity of JavaScript is disallowed (for example, by disallowing the use of
 the 
\family typewriter
eval
\family default
 function).
\end_layout

\begin_layout Subsection*
Man In The Middle Attack
\end_layout

\begin_layout Standard
In any situation where users may exchange encrypted sensitive data using
 a service, there is the potential for a man-in-the-middle attack to be
 executed by that service (or by some third party who as gained access to
 their servers) 
\begin_inset CommandInset citation
LatexCommand cite
key "ThoughtsOnJSCrypto"

\end_inset

.
 Because the server is likely to act as a de facto public key infrastructure
 - in that it facilitates the exchange of public keys between users - it
 has the capability to provide a public key for which it controls the private
 key to the user sending information, and decrypt the information for itself
 before forwarding it on to the receiving user.
 
\end_layout

\begin_layout Standard
In order to negate this possibility, it is necessary for there to be some
 way to verify that a particular public key belongs to the user that the
 service claims it belongs to.
 The most common methods of doing this are to either pre-distribute the
 keys to end users, or to use a side channel to facilitate key exchange,
 or to verify the authenticity of keys via some side channel.
\end_layout

\begin_layout Subsection*
LavaBit, and the Assumed Security of TLS/SSL
\end_layout

\begin_layout Standard
Most discussions of internet- and web-centric security assume that TLS/SSL
 is as secure as it reasonably can be.
 However, there is reason to believe that this is not necessarily the case.
\end_layout

\begin_layout Standard
LavaBit.com 
\begin_inset CommandInset citation
LatexCommand cite
key "LavaBit"

\end_inset

 was an email provider (it has since shut down) specialising in providing
 privacy to its customers.
 It did so by encrypting emails 
\begin_inset Quotes eld
\end_inset

at rest
\begin_inset Quotes erd
\end_inset

 (i.e.
 after it received them).
 The mechanisms it used to do this meant that it still retained some ability
 to access those emails at certain points in the chain, although it actively
 chose not to do so.
\end_layout

\begin_layout Standard
Recently unsealed court documents show that the FBI demanded (via the court)
 that LavaBit.com hand over its SSL keys 
\begin_inset CommandInset citation
LatexCommand cite
key "LavaBitCourtDocs,WiredLavaBitCryptoKeys"

\end_inset

, presumably in an attempt to monitor or pursue Edward Snowden, who was
 known to have used the service.
\end_layout

\begin_layout Standard
Possession of the SSL keys would in principle allow the FBI to intercept
 any and all traffic to and from LavaBit.com.
 It would also allow for the impersonation of LavaBit's servers, in a way
 which would be undetectable, allowing for material not originating from
 LavaBit.com to be sent to its users.
\end_layout

\begin_layout Standard
The ability for governments to forcibly acquire SSL keys entirely undermines
 the type of security that SSL is supposed to provide - i.e.
 ensuring that the information content of a communication is only available
 to the intended parties, and that those involved in the communication are
 who they say they are.
\end_layout

\begin_layout Subsection*
Cost to Business
\end_layout

\begin_layout Standard
The revelations about the extent and reach of the U.S.
 surveillance apparatus is expected to harm the profitability of businesses
 involved in cloud-computing which host their data within the United States'
 jurisdiction.
 A recent report by the Information Technology and Innovation foundation
 puts the cost (in terms of lost revenue) to the U.S.
 cloud computing industry at $22 to $35 billion over the three years from
 August 2013 
\begin_inset CommandInset citation
LatexCommand cite
key "PRISMCostToIndustry"

\end_inset

.
\end_layout

\begin_layout Standard
Security breaches have a similarly chilling effect on business revenue and
 the broader economy.
 The PlayStation Network hack 
\begin_inset CommandInset citation
LatexCommand cite
key "PSN"

\end_inset

 alone is said to have cost Sony $170 million USD 
\begin_inset CommandInset citation
LatexCommand cite
key "PSNHackCost"

\end_inset

, while identity theft in general is said to cost the US economy over $56
 billion USD per year (as of 2012) 
\begin_inset CommandInset citation
LatexCommand cite
key "IDTheftCost"

\end_inset

.
\end_layout

\begin_layout Section
Summary of Current Literature
\end_layout

\begin_layout Standard
**TODO**
\end_layout

\begin_layout Chapter
Solution Overview
\begin_inset CommandInset label
LatexCommand label
name "chap:Solution-Overview"

\end_inset


\end_layout

\begin_layout Standard
**TODO: Some/all of this may get moved to other sections.
 I just needed somewhere to write this so I could put the broad picture
 down in words.**
\end_layout

\begin_layout Standard
**TODO: Fact that sensitive data is service-defined**
\end_layout

\begin_layout Standard
Here we present an overview of the model solution to the problem of how
 web services can preserve the privacy of their users.
 It is intended to inform the discussion in Chapters **TODO: Cross-reference**.
\end_layout

\begin_layout Standard
Our base assumption is that an individual or organisation wishes to create
 a web service which - insofar as possible - preserves the privacy of its
 users, and moreover offers some guarantees both to the service creator,
 and to the users of the service, that this privacy is preserved.
\end_layout

\begin_layout Standard
If the service creator does not wish to preserve their user's privacy, then
 there is no point in their utilising the solution presented in this paper.
 A third possibility exists, whereby the service creator wishes to 
\emph on
appear
\emph default
 as though they are preserving privacy in an attempt to dupe their users
 into a false sense of security.
 I would note that this could barely produce a worse privacy outcome than
 the one which already exists for web-service users at the moment; nevertheless
 our solution treats this case as a security breach, and deals with it appropria
tely.
 **TODO: Make sure I have.**
\end_layout

\begin_layout Standard
Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Service-Model"

\end_inset

 provides a model of how one might set up a service which accomplishes this
 goal.
 Under the correct operation of this model all sensitive user data is encrypted
 on the client before it is sent to the service (if it is sent at all).
 The decryption mechanisms are never conveyed in any usable form to the
 service, resulting in perhaps the most important property of our model
 - that the service cannot read the sensitive data, and therefore neither
 can anyone else on the service side of the equation, nor anyone in between.
\end_layout

\begin_layout Standard
Executed correctly, this property results in peace of mind for both the
 users and the service provider.
 From the user's perspective, they are assured that the service provider
 cannot disclose their sensitive information to any third party, willingly
 or otherwise.
 From the service provider's perspective, they are assured that even if
 they are compelled to turn over user data, or suffer a security breach
 in which their data stores are compromised, such data is all but meaningless
 in the form that they posses.
\end_layout

\begin_layout Standard
However, additional measures are required if the service is to retain broad
 usability comparable to most popular web services, while still offering
 these guarantees.
 Most services which currently offer these sorts of features require the
 user to explicitly download, install and/or configure specialist software
 in order facilitate the security mechanisms.
 That is an outcome we would expressly like to avoid, as many users are
 either not willing or not able to take those additional steps to protect
 their privacy.
\end_layout

\begin_layout Standard
If we are to avoid forcing users to install separate software in order to
 protect their privacy, then we must find another way to deliver these protectio
ns.
 Considering we are discussing web services, the most obvious delivery mechanism
 is via the web browser, which in principle already possesses all the capabiliti
es we need - that is, a user-friendly method of content delivery and a programmi
ng language (i.e.
 JavaScript) which is powerful enough to implement encryption in.
 However, this raises its own problems.
\end_layout

\begin_layout Standard
Firstly, and most importantly, web-pages and all of their associated content
 are supplied directly from the service (or wherever else they deem to load
 them from) when the user requests them, and (caching aside) this content
 does not tend to persist between requests.
 This means that the service is supplying to the user the cryptographic
 code (in the form of JavaScript) that is intended to protect the user's
 privacy, and that the service may modify this code at any time, without
 explicitly notifying the user.
 Obviously this is a serious security problem, given that a compromised
 service is the primary threat we wish to defend against.
\end_layout

\begin_layout Standard
The issue is not insurmountable, however.
 In order to operate under such a model while still guaranteeing the privacy
 of users, we need to verify three things:
\end_layout

\begin_layout Itemize
That the code the client receives is the code that the service intended
 to send; that is, it has not been tampered with by some unauthorised third
 party.
\end_layout

\begin_layout Itemize
The portion of the code that the user receives which implements the cryptographi
c and privacy preserving functions is the what the user expects to receive.
 That is, the service provider has not modified the fundamentals of the
 code which protects the user's privacy.
\end_layout

\begin_deeper
\begin_layout Itemize
It is assumed that there is some reasonably standardised implementation
 of the cryptographic and privacy preserving functions, which can be checked
 against.
\end_layout

\end_deeper
\begin_layout Itemize
The portions of the code which implement the actual web service - as distinct
 from the code which implements the cryptography and other privacy preserving
 functions - do not violate the user's privacy, nor do they do anything
 which could subvert the measures put in place by the cryptographic and
 privacy preserving functions.
\end_layout

\begin_deeper
\begin_layout Itemize
It is assumed that the code which implements the cryptography and other
 privacy preserving functions does not in itself have the capability to
 violate the user's privacy.
\end_layout

\end_deeper
\begin_layout Standard
It is important to note that all of the above are 
\emph on
checks
\emph default
.
 If any of them fails, then is is possible that the user's privacy is being
 violated.
 However, it is possible for all of them to succeed without actually checking
 them
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This will become important in a moment.
\end_layout

\end_inset

, thus still in practice ensuring privacy.
\end_layout

\begin_layout Standard
The service cannot be relied upon to supply a way to check these things,
 for the same reasons we cannot completely rely on it to supply code which
 is guaranteed to preserve the user's privacy.
 Because we wish to maintain the service's usability, we also cannot rely
 on all users installing something which performs the checks.
\end_layout

\begin_layout Standard
However, what can (statistically speaking) be relied upon is that 
\emph on
some
\emph default
 users will install software if it guarantees their privacy.
 If we assume that the service cannot distinguish users who have installed
 such software from those who have not
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
Without some form of intervention this assumption is not actually true,
 but we will deal with that problem later.
\end_layout

\end_inset

, then the service provider (or anyone else) would be unable to change their
 code in a way which violates privacy en mass, without someone noticing
 and making that information public
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This approach belonging to the Don Chipp model of security; namely 
\begin_inset Quotes eld
\end_inset

Keep the bastards honest
\begin_inset Quotes erd
\end_inset

.
\end_layout

\end_inset

.
 In the case of trying to ensure privacy against server/service compromise,
 knowing that the violation exists is extremely useful, since if the data
 is encrypted then ceasing to use the service unless/until the issue is
 fixed is an entirely valid way for a user to protect their privacy and
 data.
\end_layout

\begin_layout Standard
How to deliver software to perform such checks is a fairly dull question.
 Browser plugins cannot be tampered with by a service; they offer the integratio
n with the browser necessary to perform the checks above; as we are not
 performing any sort of cryptography (particularly key-generation) within
 the software, we do not need the access to the operating system that an
 independent program provides; they also tend to be easier to install than
 an independent program.
 For these reasons, delivering these checks via a plugin seems the best
 route.
 If we wished to check code running in some environment other than the browser,
 then an independent program would likely be necessary.
 The only constraint we must place on such software is that its source-code
 be available, so that its correct operation can be independently checked
 and verified.
 
\end_layout

\begin_layout Standard
Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Plugin-Model"

\end_inset

 will describe the details of software capable of performing the necessary
 checks.
\end_layout

\begin_layout Chapter
Service Model
\begin_inset CommandInset label
LatexCommand label
name "chap:Service-Model"

\end_inset


\end_layout

\begin_layout Standard
In this chapter, we present a generalised model of how one could set up
 a web service with the intent to protect the sensitive information of the
 service's users.
 We will particularly focus on the case where the client-side portion of
 the service consists of a web page (or pages), including JavaScript code
 and any resources required by the page (images, stylesheets, etc), as this
 is by a large margin the most prevalent current method for delivering web
 services.
 However, the model (with a few provisos) could potentially be extended
 to other similar delivery methods, such as 
\begin_inset Quotes eld
\end_inset

apps
\begin_inset Quotes erd
\end_inset

 on mobile phones and tablets, and possibly further afield.
 Some of the model has been adapted from work done in industry - particularly
 that of Mega 
\begin_inset CommandInset citation
LatexCommand cite
key "MegaDoc"

\end_inset

 and CryptoCat 
\begin_inset CommandInset citation
LatexCommand cite
key "Crypocat"

\end_inset

.
\end_layout

\begin_layout Standard
The model is intended to be verifiable by the client; that is to say that
 it is intended for it to be possible for the client to check that
\end_layout

\begin_layout Itemize
The client-side portion of the service is not disclosing any potentially
 sensitive information to any third party (including the server-side portion
 of the service).
\end_layout

\begin_deeper
\begin_layout Itemize
The corollary of this is that all information disclosed to the service or
 to third parties is either not sensitive, or is encrypted.
\end_layout

\end_deeper
\begin_layout Itemize
The client-side portion of the service has not been tampered with by a third
 party; that is to say, what is sent to the client is what the service intended
 to sent to the client, and what the client expected to be sent.
\end_layout

\begin_layout Itemize
All sensitive information which one user decides to make available to another
 user via the service is made available only to that user, and not to another
 user, to the server, or to a third party.
 **TODO: Make sure I've done this**.
\end_layout

\begin_layout Itemize
The client-side portion of the service does not contain code with the potential
 to subvert any of the privacy preserving measures.
\end_layout

\begin_layout Standard
The actual process of how we can handle the verification is detailed in
 Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Plugin-Model"

\end_inset

.
\end_layout

\begin_layout Standard
Potential adversaries of, and deviations from the model are handled in the
 security section **TODO: Security section**, as opposed to in the model
 itself.
\end_layout

\begin_layout Section
Software/Website Model
\end_layout

\begin_layout Standard
We will model our service as a typical multi-page HTML+JavaScript-based
 website, accessed via a web-browser.
\end_layout

\begin_layout Section
Actors
\end_layout

\begin_layout Standard
There are three active participating entities in our model.
\end_layout

\begin_layout Itemize
The user.
\end_layout

\begin_layout Itemize
The client.
\end_layout

\begin_layout Itemize
The service.
\end_layout

\begin_layout Standard
We consider the intermediaries between the client and the service (i.e.
 ISPs and internet traffic carriers) to be passive entities, merely responsible
 for passing data from one to the other.
 As both the connection and any sensitive data travelling on it is encrypted,
 there is very little they could actively do anyway.
 **TODO: This as part of security section**
\end_layout

\begin_layout Standard
Similarly the server - and any supporting software running on it, such as
 web servers and database servers - are assumed to perform their intended
 functions correctly when interacting with the client and the service.
 **TODO: This as part of security section**
\end_layout

\begin_layout Section
Connection
\end_layout

\begin_layout Itemize
All communications between the client and server are assumed to take place
 over a secured connection (e.g.
 HTTPS).
\end_layout

\begin_layout Itemize
Any intermediaries are assumed not to be able to decrypt data sent between
 the client and server due to the use of HTTPS.
 There is the possibility that they will collect meta-data about the transmissio
n, but attempting to avoid that is a) likely impossible, and b) outside
 the scope of this project.
\end_layout

\begin_layout Section
Encryption Scheme
\end_layout

\begin_layout Standard
Our security model uses a moderately complex encryption scheme, visualised
 in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Encryption Scheme"

\end_inset

.
\end_layout

\begin_layout Standard
All encryption described under this scheme is performed on the client (e.g.
 in the web-browser).
\end_layout

\begin_layout Standard
The entities involved in this encryption scheme are:
\end_layout

\begin_layout Itemize
The user.
\end_layout

\begin_layout Itemize
The user's password.
\end_layout

\begin_layout Itemize
A symmetric master key.
\end_layout

\begin_layout Itemize
An asymmetric public/private key-pair.
\end_layout

\begin_layout Itemize
Many symmetric local keys.
\end_layout

\begin_layout Itemize
Many instances of distinct sensitive data.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Diagrams/Encrypt.eps
	lyxscale 50
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Diagram of encryption scheme dependencies.
\begin_inset CommandInset label
LatexCommand label
name "fig:Encryption Scheme"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Under this model, the user provides their password to the encryption software
 (e.g.
 via a password input in the browser).
 The password is then hashed, and this resulting hash may then be used to
 encrypt/decrypt the master key.
\end_layout

\begin_layout Standard
The master key is a symmetric key, which is used to encrypt/decrypt the
 private key, and all local keys.
 
\end_layout

\begin_layout Standard
The local keys are symmetric keys, which correspond one-to-one with an instance
 of sensitive data, which they may be used to encrypt/decrypt.
 An instance of sensitive data may be any logically distinct piece of informatio
n, such as the body of an email, a PDF document, or a post on a social network.
\end_layout

\begin_layout Standard
The public/private key-pair may be used to encrypt/decrypt information that
 the other key in the pair decrypts/encrypts, as is typical under asymmetric
 encryption schemes.
 The public key is never encrypted, since it is intended to be publicly
 available.
\end_layout

\begin_layout Standard
The public/private keys are necessary in order to send sensitive information
 to other users.
 The local keys are necessary in order to only make available specific data.
 If all sensitive information was encrypted using only one key, it is conceivabl
e that another user could decrypt all of that data, rather that just the
 instance that was intended to be made available.
\end_layout

\begin_layout Standard
The master key could potentially be replaced by the public/private pair.
 However, asymmetric encryption schemes tend to be computationally much
 slower than symmetric ones, so it is preferable to minimise the use of
 the asymmetric keys to only when they are actually needed.
\end_layout

\begin_layout Section
Common Elements
\end_layout

\begin_layout Standard
All pages and procedures are assumed to have the following steps in common:
\end_layout

\begin_layout Enumerate
The client uses a JavaScript-enabled web-browser or similar program to make
 an HTTP request to the server for the appropriate page.
\end_layout

\begin_layout Enumerate
The server responds, sending the corresponding HTML.
\end_layout

\begin_layout Enumerate
The client interprets the HTML, and makes additional requests to the server
 as appropriate for required resources (images, CSS, JavaScript etc).
\end_layout

\begin_layout Enumerate
The server responds by sending the appropriate resources.
\end_layout

\begin_deeper
\begin_layout Enumerate
Among the JavaScript sent to the client is code for performing the necessary
 cryptographic operations.
\end_layout

\end_deeper
\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Common-Elements"

\end_inset

 provides a visual representation of these steps.
\end_layout

\begin_layout Standard
Users may optionally install a plugin in order to verify that their privacy
 is ensured.
 This is represented appropriately throughout the diagrams for this model.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Diagrams/common.eps
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Common Elements
\begin_inset CommandInset label
LatexCommand label
name "fig:Common-Elements"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
User Signup and Key Generation
\end_layout

\begin_layout Standard
The following describes the essential steps under the model for performing
 user signup and encryption key generation .
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:User-Signup-and-KeyGen"

\end_inset

 provides a visual representation of this process.
\end_layout

\begin_layout Enumerate
The client requests and receives a sign-up page.
\end_layout

\begin_layout Enumerate
On the client, a public-private key-pair is generated (e.g.
 by use of the RSA algorithm 
\begin_inset CommandInset citation
LatexCommand cite
key "RSA"

\end_inset

).
\end_layout

\begin_layout Enumerate
On the client, a randomly generated symmetric 
\begin_inset Quotes eld
\end_inset

master key
\begin_inset Quotes erd
\end_inset

 is created.
\end_layout

\begin_layout Enumerate
On the client, the private key is encrypted using this master key.
\end_layout

\begin_layout Enumerate
On the client, the user fills out a web-form, supplying at minimum a unique
 identifier (e.g.
 a username, or email address) and password.
\end_layout

\begin_deeper
\begin_layout Enumerate
This may happen concurrent to steps 2-4.
\end_layout

\end_deeper
\begin_layout Enumerate
The master key is encrypted using a hash derived from the password.
\end_layout

\begin_layout Enumerate
The public key, the encrypted private key, and the encrypted master key
 and are all transmitted to the server, along with any other signup information.
 These are then stored on the server.
\end_layout

\begin_deeper
\begin_layout Enumerate
The unencrypted private key, the unencrypted master key, and the password
 (or anything derived from it) are 
\emph on
not
\emph default
 transmitted to the server.
 **TODO: In plugin, ensure these aren't being dicked with**
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Diagrams/signup.eps
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
User Signup and Key Generation
\begin_inset CommandInset label
LatexCommand label
name "fig:User-Signup-and-KeyGen"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Authentication and Log-In
\end_layout

\begin_layout Standard
The following describes the essential steps under the model for authenticating
 the identity of a user, and allowing them to log in to the service.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Authentication-and-Log-In"

\end_inset

 provides a visual representation of this process.
\end_layout

\begin_layout Enumerate
The client requests and receives a page containing a login form.
\end_layout

\begin_layout Enumerate
The user fills out the log-in form with their unique identifier and password.
\end_layout

\begin_layout Enumerate
The user submits the form, which causes the client to send the unique identifier
 to the server.
\end_layout

\begin_deeper
\begin_layout Enumerate
But 
\emph on
not
\emph default
 the password.
\end_layout

\end_deeper
\begin_layout Enumerate
The server responds with the encrypted private key, encrypted master key
 and public key corresponding to the unique identifier, and a random session
 token which has been encrypted using the public key of the corresponding
 unique identifier.
\end_layout

\begin_layout Enumerate
The client decrypts the master key using a hash of the supplied password,
 then decrypts private key using the master key, and finally decrypts the
 session key using the private key.
\end_layout

\begin_layout Enumerate
The decrypted session key is then sent to the server, and the user is considered
 authenticated if the key matches the original on the server.
\end_layout

\begin_layout Enumerate
The session key is then set as a cookie, so that the session may be tracked
 across pages.
\end_layout

\begin_layout Enumerate
The decrypted private key, master key and public key are saved to the JavaScript
 
\family typewriter
localStorage
\family default
 object.
\end_layout

\begin_deeper
\begin_layout Enumerate
This is so that they persist across pages, but in a manner not opaquely
 available to the server (in contrast with cookies).
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Diagrams/login.eps
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Authentication and Log-In
\begin_inset CommandInset label
LatexCommand label
name "fig:Authentication-and-Log-In"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Storing Sensitive Information
\end_layout

\begin_layout Standard
The following describes the essential steps under the model for enabling
 a user to store sensitive information in an encrypted form with the service,
 while ensuring that such information is not readable by the service.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Storing-Private-Information"

\end_inset

 provides a visual representation of this process.
\end_layout

\begin_layout Enumerate
The client requests and receives a page which may be used to supply and
 encrypt sensitive information.
\end_layout

\begin_layout Enumerate
The user supplies the sensitive information they wish encrypted and stored
 to the JavaScript runtime, in some manner applicable to the type on information.
\end_layout

\begin_deeper
\begin_layout Enumerate
Different types of information may use different forms of input.
 The specifics are not relevant, other than that it reaches the JavaScript
 runtime in a usable fashion.
\end_layout

\end_deeper
\begin_layout Enumerate
On the client, randomly generated symmetric keys (the 
\begin_inset Quotes eld
\end_inset

local keys
\begin_inset Quotes erd
\end_inset

) are created for each distinct piece of information to be encrypted.
\end_layout

\begin_layout Enumerate
The JavaScript runtime encrypts the information using the local keys.
\end_layout

\begin_layout Enumerate
The encrypted information is transmitted to the server.
\end_layout

\begin_deeper
\begin_layout Enumerate
The unencrypted information is 
\emph on
not
\emph default
 transmitted to the server.
\end_layout

\end_deeper
\begin_layout Enumerate
The local key(s) are encrypted with the master key, and transmitted to the
 server.
\end_layout

\begin_deeper
\begin_layout Enumerate
The unencrypted local keys are 
\emph on
not
\emph default
 transmitted to the server.
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Diagrams/saveInfo.eps
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Storing sensitive Information
\begin_inset CommandInset label
LatexCommand label
name "fig:Storing-Private-Information"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Retrieving Sensitive Information
\begin_inset CommandInset label
LatexCommand label
name "sec:Retrieving-Private-Information"

\end_inset


\end_layout

\begin_layout Standard
The following describes the essential steps under the model for enabling
 a user to retrieve sensitive information that was previously encrypted
 and stored with the service, either by that user, or by another user that
 has made the information available to the first user.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Retrieving-sensitive-Information"

\end_inset

 provides a visual representation of this process.
\end_layout

\begin_layout Enumerate
The client requests and receives a page which may contain encrypted sensitive
 information.
\end_layout

\begin_layout Enumerate
This may contain encrypted sensitive information, including the encrypted
 local key(s) corresponding to said information.
\end_layout

\begin_layout Enumerate
In place of, or in addition to the encrypted information sent in step 2,
 the client requests and receives encrypted sensitive information, including
 the encrypted local key(s) corresponding to said information.
\end_layout

\begin_layout Enumerate
The encrypted local keys are decrypted using the master key.
 The encrypted information is then decrypted using the local keys.
\end_layout

\begin_layout Enumerate
The information is made available to the user in whatever format is appropriate
 to the information.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways true
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Graphics
	filename Diagrams/retrieveInfo.eps
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Retrieving sensitive Information
\begin_inset CommandInset label
LatexCommand label
name "fig:Retrieving-sensitive-Information"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Making Sensitive Information Available to Other Users
\begin_inset CommandInset label
LatexCommand label
name "sec:Making-Sensitive-Information"

\end_inset


\end_layout

\begin_layout Standard
The following describes the essential steps under the model for enabling
 one user to share sensitive information with one or more other users.
\end_layout

\begin_layout Enumerate
The client requests and receives a page which facilitates making sensitive
 information available to other users.
\end_layout

\begin_layout Enumerate
The user indicates the specific information they would like to make available
 to other users.
\end_layout

\begin_layout Enumerate
The user indicates the specific user(s) they would like to make the information
 available to (using the unique identifier associated with each user).
\end_layout

\begin_layout Enumerate
The public key corresponding to each of the specified unique identifiers
 is requested from, and supplied by the server
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
There is obvious potential for a man-in-the-middle attack here, which is
 addressed in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Data-Exchange"

\end_inset

.
\end_layout

\end_inset

.
\end_layout

\begin_layout Enumerate
The local keys corresponding to each of the specified pieces of information
 are retrieved by the server, and decrypted using the user's master key.
\end_layout

\begin_layout Enumerate
The local keys are then re-encrypted using the retrieved public keys.
\end_layout

\begin_layout Enumerate
These re-encrypted version are then sent to the server.
\end_layout

\begin_layout Enumerate
On the receiving end, the process works as described under the 
\begin_inset Quotes eld
\end_inset


\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:Retrieving-Private-Information"

\end_inset


\begin_inset Quotes erd
\end_inset

 section.
\end_layout

\begin_layout Standard

\lang english
\begin_inset Float figure
wide false
sideways true
status collapsed

\begin_layout Plain Layout
\align center

\lang english
\begin_inset Graphics
	filename Diagrams/shareInfo.eps
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout

\lang english
\begin_inset Caption

\begin_layout Plain Layout
Making sensitive Information Available to Others
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Specification of Sensitive Data
\end_layout

\begin_layout Standard
One important aspect that must be noted is this: what specifically is considered
 
\begin_inset Quotes eld
\end_inset

sensitive data
\begin_inset Quotes erd
\end_inset

 as utilised under this model is defined 
\emph on
by the service
\emph default
.
 This means that a service is only as privacy-preserving as its creator
 wishes it to be.
 Once data 
\emph on
is
\emph default
 designated as being sensitive (and therefore encrypted), it cannot then
 be undesignated as such, and at that point such data will never be available
 to the service.
\end_layout

\begin_layout Standard
This is necessary so that the the service can delineate between sensitive
 data and service-critical data, but it must be reiterated, these designations
 are defined by the service, not the user.
\end_layout

\begin_layout Chapter
Implementation Overview
\end_layout

\begin_layout Standard
**TODO: This may be moved elsewhere.**
\end_layout

\begin_layout Standard
**TODO: More of this**
\end_layout

\begin_layout Standard
In this chapter, we will describe the necessary portions of an implementation
 of this model.
 For sections involving JavaScript, jQuery's 
\begin_inset CommandInset citation
LatexCommand cite
key "jQuery"

\end_inset

 notation will be used for conciseness.
 This is not strictly necessary for implementation.
\end_layout

\begin_layout Section
Cryptography
\end_layout

\begin_layout Standard
We require an appropriate implementation of both a symmetric key algorithm
 (e.g.
 AES 
\begin_inset CommandInset citation
LatexCommand cite
key "AES"

\end_inset

) and an asymmetric key algorithm (e.g.
 RSA 
\begin_inset CommandInset citation
LatexCommand cite
key "RSA"

\end_inset

) in JavaScript.
 These implementations must provide encryption, decryption, and key generation
 functions for both algorithms.
\end_layout

\begin_layout Standard
The psuedo-random number generator is assumed to be supplied by the browser,
 in the form of the 
\family typewriter
window.crypto.getRandomValues
\family default
 function 
\begin_inset CommandInset citation
LatexCommand cite
key "MozGetRandomValues"

\end_inset

, or failing that any other appropriate cryptographically secure random
 number generator.
\end_layout

\begin_layout Section
Sensitive Information Designation
\end_layout

\begin_layout Standard
In the case of text, we require that all sensitive information included
 as a part of the initial HTML page be designated like so:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=HTML,tabsize=4"
inline false
status open

\begin_layout Plain Layout

<div class="sensitive" key="encrypted-local-key-here">
\end_layout

\begin_layout Plain Layout

	Encrypted information here.
 
\end_layout

\begin_layout Plain Layout

</div>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The “
\family typewriter
sensitive
\family default
” class is a flag for the cryptography library to indicate both that the
 tag contains sensitive information, and that it should be decrypted for
 the user.
 As per normal HTML rules, the class attribute may contain other values
 in addition to “
\family typewriter
sensitive
\family default
”, and this will not interfere with the decryption.
\end_layout

\begin_layout Standard
The 
\emph on
key
\emph default
 attribute is a non-standard HTML attribute, used here to store the encrypted
 version of the local key corresponding to the sensitive information enclosed
 by the tag.
\end_layout

\begin_layout Standard
Finally, it should be noted that there is no requirement that the tag used
 be a 
\family typewriter
div
\family default
 tag - that is simply used here as an example.
 We do require that there be a tag wrapping the sensitive information though,
 and that such a tag be the inner-most tag, relative to the encrypted informatio
n.
\end_layout

\begin_layout Section
Decryption
\end_layout

\begin_layout Standard
There are two primary methods by which sensitive data may be decrypted,
 beyond the assumed basic cryptographic 
\family typewriter
decrypt
\family default
 functions.
\end_layout

\begin_layout Standard
The first method applies if an encrypted form of the data is present in
 the HTML page at load time, as described above.
 In that instance, we use the following function: **TODO: Test this.**
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "tabsize=4"
inline false
status open

\begin_layout Plain Layout

//On document ready
\end_layout

\begin_layout Plain Layout

$(document).ready(function() {
\end_layout

\begin_layout Plain Layout

	//For-each tag marked "sensitive".
\end_layout

\begin_layout Plain Layout

	$(".sensitive").each(function() {
\end_layout

\begin_layout Plain Layout

		//Grab the cyphertext
\end_layout

\begin_layout Plain Layout

		var cypherText = $(this).html();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		//Grab the key
\end_layout

\begin_layout Plain Layout

		var localKey = $(this).attr("key");
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		//Decrypt the local key
\end_layout

\begin_layout Plain Layout

		//(masterKey is assumed to be in scope/retrievable)
\end_layout

\begin_layout Plain Layout

		localKey = decrypt(localKey, masterKey);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

		//Decrypt to cleartext
\end_layout

\begin_layout Plain Layout

		var clearText = decrypt(html, key);
\end_layout

\begin_layout Plain Layout

		
\end_layout

\begin_layout Plain Layout

		//Replace cyphertext with cleartext
\end_layout

\begin_layout Plain Layout

		$(this).html(clearText);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

});
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The second method applies if an encrypted form of the data is loaded in
 after the initial page load (e.g.
 via an AJAX call), and needs to be added to the DOM.
 In that instance, we use the following function: **TODO: Test this.**
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "tabsize=4"
inline false
status open

\begin_layout Plain Layout

//DOMReference contains a reference to an
\end_layout

\begin_layout Plain Layout

//existing DOM node.
\end_layout

\begin_layout Plain Layout

function (cyphertext, key, DOMReference) {
\end_layout

\begin_layout Plain Layout

	//Decrypt the local key
\end_layout

\begin_layout Plain Layout

	//(masterKey is assumed to be in scope/retrievable)
\end_layout

\begin_layout Plain Layout

	localKey = decrypt(key, masterKey);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	//Decrypt to clearText
\end_layout

\begin_layout Plain Layout

	var clearText = decrypt(html, localKey);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	//Ensure that the wrapping DOM node
\end_layout

\begin_layout Plain Layout

	//is marked as sensitive.
\end_layout

\begin_layout Plain Layout

	DOMReference.addClass("sensitive");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	//Ensure the wrapping DOM node
\end_layout

\begin_layout Plain Layout

	//has the key attached.
\end_layout

\begin_layout Plain Layout

	DOMReference.attr("key", key);
\end_layout

\begin_layout Plain Layout

	
\end_layout

\begin_layout Plain Layout

	//Replace DOMReference's inner HTML
\end_layout

\begin_layout Plain Layout

	//with the cleartext.
\end_layout

\begin_layout Plain Layout

	DOMReference.html(clearText);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
**TODO: Traverse up tree to mark parents**
\end_layout

\begin_layout Chapter
Plugin Model
\lang english

\begin_inset CommandInset label
LatexCommand label
name "chap:Plugin-Model"

\end_inset


\end_layout

\begin_layout Standard
In this chapter we will describe a browser plugin intended to allow users
 to perform the checks outlined in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Solution-Overview"

\end_inset

.
 We will describe all the relevant elements required to analyse JavaScript
 code, in order to determine whether it has the capability to 
\begin_inset Quotes eld
\end_inset

leak
\begin_inset Quotes erd
\end_inset

 private information.
 **TODO: More of this**
\end_layout

\begin_layout Standard
**TODO: What happens when something below fails.
 i.e.
 alert user**
\end_layout

\begin_layout Section
Static Data Tainting in JavaScript
\end_layout

\begin_layout Standard
We may utilise the concept of data tainting 
\begin_inset CommandInset citation
LatexCommand cite
key "DataTainting"

\end_inset

 in order to detect cases where sensitive data may be accessed from within
 JavaScript.
 Briefly, data tainting is a form of control-flow analysis 
\begin_inset CommandInset citation
LatexCommand cite
key "DragonBook"

\end_inset

 whereby we mark a particular set of initial functions and operations as
 being tainted, and then any operations which depend on something tainted
 also become tainted.
 In our case, we may mark functions which have the potential to retrieve
 sensitive information as being tainted.
 These taint markings can then be used to detect whether sensitive information
 is being used inappropriately; for example, we could check if the arguments
 to an AJAX call are tainted, indicating that sensitive data could be transmitte
d to a server.
\end_layout

\begin_layout Standard
We will use the concept of 
\emph on
static
\emph default
 data tainting, as opposed to 
\emph on
dynamic
\emph default
 data tainting.
 The former involves performing a pre-runtime analysis of the code itself,
 while the latter involves analysing the code as it is running.
 Dynamic data tainting has the property of only analysing the code that
 is actually executed, whereas static analysis examines all possible execution
 paths.
 Which of those is preferable is a matter of point of view - the dynamic
 approach is more precise, in that it gives less false positives; however,
 the static approach allows the program to examine the 
\emph on
intent
\emph default
 of the program, even if that intent is not carried out.
 For our purposes, the choice to use static analysis is made largely because
 it is easier to describe and implement, and has a lower performance overhead.
\end_layout

\begin_layout Standard
In order to perform static taint analysis, we need four things:
\end_layout

\begin_layout Enumerate
The software's source-code.
\end_layout

\begin_layout Enumerate
A set of initially tainted functions.
\end_layout

\begin_layout Enumerate
A set of taint-sink functions.
\end_layout

\begin_layout Enumerate
A definition of taint propagation in JavaScript.
\end_layout

\begin_layout Standard
We have the first (in-browser JavaScript is inherently open-source).
 The third is relatively easy to define: AJAX calls, and anything else which
 could be used to communicate information to the server.
 The fourth point will be defined in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Taint-Propagation-Model"

\end_inset

, while the second will be defined in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Initially-Tainted-Functions"

\end_inset

.
\end_layout

\begin_layout Standard
An important point to note is that our propagation model present here attempts
 to minimise or eliminate false-negatives, which is to say that everything
 which 
\emph on
could
\emph default
 possibly depend on tainted data is marked as such.
 This unfortunately results in an abundance of false-positives.
 This is much less of a problem than in it generally is in taint analysis
 models, specifically because most such models attempt to protect the 
\emph on
program
\emph default
 from the 
\emph on
user
\emph default
, while we are attempting to protect the 
\emph on
user
\emph default
 from the 
\emph on
program
\emph default
.
 This places a great deal more flexibility in the hands of the developer
 to program around the constraints of the propagation model.
\end_layout

\begin_layout Section
Taint Propagation Model
\begin_inset CommandInset label
LatexCommand label
name "sec:Taint-Propagation-Model"

\end_inset


\end_layout

\begin_layout Subsection
Tainted Entities
\end_layout

\begin_layout Standard
A 
\emph on
tainted entity
\emph default
 shall be defined as any JavaScript data construct (that is: variables,
 functions, objects, arrays, and anything else which may be represented
 by an identifier) which has been marked as tainted.
\end_layout

\begin_layout Standard
The set of tainted entities is tracked by the taint propagation model.
 All initially tainted functions (defined in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Initially-Tainted-Functions"

\end_inset

) are marked as tainted, and considered tainted entities.
 Other entities are marked as being tainted or not tainted as the program
 is analysed using the propagation model.
\end_layout

\begin_layout Subsection
Expressions
\end_layout

\begin_layout Standard
**TODO: Be more precise.**
\end_layout

\begin_layout Standard
For our purposes, an expression will be defined as some chain of 
\emph on
operators
\emph default
 (+, *, -, /, &&, ||, etc) and 
\emph on
operands
\emph default
 (constants, variables, function calls, etc).
 If any of the operands is a tainted entity, then the expression as a whole
 shall be considered tainted, although operands which are not already tainted
 will not be marked as tainted as a result of this.
\end_layout

\begin_layout Standard
For example, if the variable 
\family typewriter
foo
\family default
 is tainted, and 
\family typewriter
bar
\family default
 is not, then the expression
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

42 * foo + bar;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
will be tainted as a whole.
 However, the variable 
\family typewriter
bar
\family default
 will remain untainted.
\end_layout

\begin_layout Subsubsection*
\begin_inset CommandInset label
LatexCommand label
name "sub:Function-Calls"

\end_inset

Function Calls
\end_layout

\begin_layout Standard
For our purposes, a function call is something of the form
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

func(arg1, arg2, ...);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
where `
\family typewriter
arg1, arg2, ...
\family default
' represents some a finite number of arguments to the function call, and
 
\family typewriter
func
\family default
 represents the function name.
 Each argument may be an expression in its own right.
 If any of the arguments are tainted, then the whole function 
\emph on
call
\emph default
 is considered tainted - although the function 
\emph on
identifier
\emph default
 is not marked at tainted as a result of this.
 The other arguments 
\emph on
may
\emph default
 become tainted (see Subsection 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Functions"

\end_inset

).
 For example
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

func(taintedArg, untaintedArg);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
if 
\family typewriter
taintedArg
\family default
 was tainted, but 
\family typewriter
func
\family default
, and 
\family typewriter
untaintedArg
\family default
 were not, then the call as a whole would be tainted, but 
\family typewriter
func
\family default
 would not become tainted, and 
\family typewriter
untaintedArg
\family default
 
\emph on
may
\emph default
 become tainted, depending on the function.
\end_layout

\begin_layout Subsection
Assignments
\end_layout

\begin_layout Standard
For our purposes, an assignment operation is anything of the form
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

identifier = expression;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If the 
\family typewriter
expression
\family default
 portion of the operation is tainted, then 
\emph on
everything
\emph default
 in the assignment portion of the operation is also considered tainted.
 In particular, assume that in the following code listings, 
\family typewriter
x
\family default
 is already tainted.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "numbers=left"
inline false
status open

\begin_layout Plain Layout

var foo = x;
\end_layout

\begin_layout Plain Layout

foo = x;
\end_layout

\begin_layout Plain Layout

foo[i] = x;
\end_layout

\begin_layout Plain Layout

foo.bar = x;
\end_layout

\begin_layout Plain Layout

foo = bar = x;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In line 1, the new variable 
\family typewriter
foo
\family default
 is marked as tainted.
 
\end_layout

\begin_layout Standard
In line 2, the existing variable 
\family typewriter
foo
\family default
 is marked as tainted, regardless of whether it previously was.
 
\end_layout

\begin_layout Standard
In lines 3 and 4 the variable 
\family typewriter
foo
\family default
 is marked as tainted; 
\family typewriter
foo[i]
\family default
 and 
\family typewriter
foo.bar
\family default
 would technically also be marked as tainted, but this is subsumed by the
 marking on the parent entity.
\end_layout

\begin_layout Standard
In line 5, both 
\family typewriter
foo
\family default
 and 
\family typewriter
bar
\family default
 will be marked as tainted.
\end_layout

\begin_layout Standard
If an identifier is currently marked as tainted, but is assigned an untainted
 expression, then the tainted marking will be removed from that identifier
 from that point forward in the program (unless it is within a tainted scope,
 see 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Tainted-Scopes"

\end_inset

), until it is assigned another tainted value.
\end_layout

\begin_layout Subsection
References
\end_layout

\begin_layout Standard
Suppose we have a identifier which is really just a reference to another
 variable.
 If one of these entities becomes tainted, the other must also become tainted.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var a = {foo: "Hello"}
\end_layout

\begin_layout Plain Layout

var b = a;
\end_layout

\begin_layout Plain Layout

b.foo = taintedEntity;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the above example, the variable 
\family typewriter
a
\family default
 must be tainted if b is (and vice-versa).
\end_layout

\begin_layout Subsection
Tainted Scopes
\begin_inset CommandInset label
LatexCommand label
name "sub:Tainted-Scopes"

\end_inset


\end_layout

\begin_layout Standard
In general, if a block-level statement in some way depends upon a tainted
 entity or expression, then we create a 
\emph on
tainted scope
\emph default
 covering the entire scope of the statement, such that the results of all
 statements within that scope become tainted.
 Entities which become tainted within a tainted scope remain tainted after
 the scope ends.
\end_layout

\begin_layout Standard
The specific statements this applies to are:
\end_layout

\begin_layout Itemize

\family typewriter
if ..
 else
\end_layout

\begin_layout Itemize

\family typewriter
for
\end_layout

\begin_layout Itemize

\family typewriter
for ..
 in
\end_layout

\begin_layout Itemize

\family typewriter
for each ..
 in
\end_layout

\begin_layout Itemize

\family typewriter
while
\end_layout

\begin_layout Itemize

\family typewriter
do ..
 while
\end_layout

\begin_layout Itemize

\family typewriter
switch
\end_layout

\begin_layout Itemize

\family typewriter
try ..
 catch ..
 finally
\end_layout

\begin_layout Standard
Technically it could also apply to 
\family typewriter
with
\family default
 statements; however, those are disallowed under this model (see subsection
 on 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sub:With-Statements"

\end_inset

).
\end_layout

\begin_layout Subsection
If ..
 Else Statements
\end_layout

\begin_layout Standard

\family typewriter
If ..
 else
\family default
 statements are of the form 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "tabsize=4"
inline false
status open

\begin_layout Plain Layout

if (conditionalExpression) {
\end_layout

\begin_layout Plain Layout

	statement1A;
\end_layout

\begin_layout Plain Layout

	statement2A;
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

} else {
\end_layout

\begin_layout Plain Layout

	statement1B;
\end_layout

\begin_layout Plain Layout

	statement2B;
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
with the usual proviso that the 
\family typewriter
else
\family default
 section is optional.
\end_layout

\begin_layout Standard
If 
\family typewriter
conditionaExpression
\family default
 is tainted, then we create a tainted scope across both branches of the
 statement, such that the results of all statements within both branches
 are considered tainted.
\end_layout

\begin_layout Standard
We must also consider the results if 
\family typewriter
conditionaExpression
\family default
 is not tainted.
 If some entity is tainted in either branch, this that entity is considered
 tainted after the if-statement.
 However, the analysis of that entity in one branch cannot affect the analysis
 of it in the other branch.
 For example, suppose that the identifier 
\family typewriter
x
\family default
 is already tainted, but 
\family typewriter
foo
\family default
, 
\family typewriter
y
\family default
, and 
\family typewriter
z
\family default
 are not:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var foo = 0;
\end_layout

\begin_layout Plain Layout

if(y > z) {
\end_layout

\begin_layout Plain Layout

	foo = x;
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

} else {
\end_layout

\begin_layout Plain Layout

	foo = 42;
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Within the 
\family typewriter
if
\family default
-branch (i.e.
 when 
\family typewriter
y > z
\family default
) 
\family typewriter
foo
\family default
 will be marked as tainted, and this taint may be propagated to other statements
 in the 
\family typewriter
if
\family default
-branch.
 However, 
\family typewriter
foo
\family default
 is 
\emph on
not
\emph default
 tainted in the 
\family typewriter
else
\family default
-branch (i.e.
 when 
\family typewriter
y <= z
\family default
), and thus it may not taint other statements in the 
\family typewriter
else
\family default
-branch (assuming some other statement does not taint it further down that
 branch).
\end_layout

\begin_layout Standard
Furthermore, after the 
\family typewriter
if ..
 else
\family default
 statement as a whole is analysed, 
\family typewriter
foo
\family default
 will be marked as tainted, as it was tainted in at least one branch.
\end_layout

\begin_layout Subsection
Switch Statements
\end_layout

\begin_layout Standard
Tainting of 
\family typewriter
switch
\family default
 statements behaves similarly to 
\family typewriter
if ..
 then
\family default
 statements.
 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

switch (expression) {
\end_layout

\begin_layout Plain Layout

	cases;
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If 
\family typewriter
expression
\family default
 is tainted, then we generate a tainted scope across the body of the 
\family typewriter
switch
\family default
 statement.
\end_layout

\begin_layout Standard
If 
\family typewriter
expression
\family default
 is not tainted, then each 
\family typewriter
case: ...
 break;
\family default
 pair is treated in the same was as an individual branch of an 
\family typewriter
if ..
 else
\family default
 statement.
 In the event of fall-through cases, the top-most case in the fall-through
 chain takes precedence in determining taint status.
\end_layout

\begin_layout Subsection
Loop Statements
\end_layout

\begin_layout Standard
Loop statements, (
\family typewriter
for
\family default
, 
\family typewriter
for ..
 in
\family default
, 
\family typewriter
for each ..
 in
\family default
, 
\family typewriter
while
\family default
, 
\family typewriter
do ..
 while
\family default
) behave quite similarly to one another, and to conditional statements.
 
\end_layout

\begin_layout Subsubsection*
While Loops
\end_layout

\begin_layout Standard
The simplest cases are the 
\family typewriter
while
\family default
 and 
\family typewriter
do ..
 while
\family default
 statements:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

while (invariant) {
\end_layout

\begin_layout Plain Layout

	statements;
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

do {
\end_layout

\begin_layout Plain Layout

	statements;
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

} while (invariant);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In both cases, if 
\family typewriter
invariant
\family default
 is tainted, then we generate a tainted scope across the body of the loop.
\end_layout

\begin_layout Standard
In 
\series bold
all
\series default
 cases of loop statements, if the loop invariants are 
\series bold
not
\series default
 tainted, it is still necessary to perform an analysis of the loop body
 more than once.
 This is due to the possibility that there exists an entity which is not
 tainted prior to the loop being analysed, but which becomes tainted during
 the loop analysis.
 Such an entity could conceivably taint entities syntactically before it
 during subsequent passes of the loop.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var foo = untainted-entity;
\end_layout

\begin_layout Plain Layout

var bar = untainted-entity;
\end_layout

\begin_layout Plain Layout

while(untainted-invariant) {
\end_layout

\begin_layout Plain Layout

	var baz = bar;
\end_layout

\begin_layout Plain Layout

	bar = foo;
\end_layout

\begin_layout Plain Layout

	foo = tainted-entity;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this example, neither 
\family typewriter
bar
\family default
 nor 
\family typewriter
baz
\family default
 would not be tainted during an initial analysis of the loop, as neither
 the loop condition, nor 
\family typewriter
foo
\family default
 is initially tainted.
 However, 
\family typewriter
foo
\family default
 becomes tainted before the end of the loop, and thus 
\family typewriter
bar
\family default
 would become tainted on a second loop pass loop pass.
 Similarly, 
\family typewriter
baz
\family default
 would become tainted on a third loop pass.
 It is trivially possible to construct cases whereby some entity would only
 become tainted after an arbitrarily large number of passes, though such
 a number would be fixed for each specific loop instance.
\end_layout

\begin_layout Standard
Me must therefore repeatedly analyse the loop until we reach a point where
 the taint status of all entities within both the body of the loop and the
 loop invariant(s) do not change between analysis iterations (i.e.
 we reach the fixpoint).
\end_layout

\begin_layout Standard
Because of this, we also need to disallow 
\emph on
un
\emph default
tainting of identifiers within loops.
 If this is not done, it is trivial to set up an infinite loop in the analysis.
 For example, the below is impossible to analyse without knowing how many
 iterations the loop will go for, as the taint status of 
\family typewriter
foo
\family default
 and 
\family typewriter
bar
\family default
 swaps with every iteration.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var foo = tainted-entity;
\end_layout

\begin_layout Plain Layout

var bar = untainted-entity;
\end_layout

\begin_layout Plain Layout

while(untainted-invariant) {
\end_layout

\begin_layout Plain Layout

	var tmp = foo;
\end_layout

\begin_layout Plain Layout

	foo = bar;
\end_layout

\begin_layout Plain Layout

	bar = foo;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
For Loops
\end_layout

\begin_layout Standard
In the case of a 
\family typewriter
for
\family default
 loop:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

for (initialisation; condition; final-expression) {
\end_layout

\begin_layout Plain Layout

	statements;
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If any of 
\family typewriter
initialisation
\family default
, 
\family typewriter
condition
\family default
, or 
\family typewriter
final-expression
\family default
 are tainted, then we generate a tainted scope across the body of the loop.
\end_layout

\begin_layout Standard
In the case of 
\family typewriter
for ..
 in
\family default
, and 
\family typewriter
for each ..
 in
\family default
 loops:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

for (variable in object) {
\end_layout

\begin_layout Plain Layout

	statements;
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

for each (variable in object) {
\end_layout

\begin_layout Plain Layout

	statements;
\end_layout

\begin_layout Plain Layout

	...
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
If 
\family typewriter
object
\family default
 is tainted, then we generate a tainted scope across the body of the loop.
\end_layout

\begin_layout Subsubsection*
Break & Continue Statements
\end_layout

\begin_layout Standard

\family typewriter
Break
\family default
 and 
\family typewriter
Continue
\family default
 statements within loop bodies are ignored, for the purposes of taint analysis.
 
\family typewriter
Break
\family default
 and 
\family typewriter
Continue
\family default
 statements with an attached label (which functions similarly to a 
\family typewriter
Goto
\family default
 statement in other languages) are not allowed under the model, as they
 make control flow analysis much too difficult.
\end_layout

\begin_layout Subsection
Try ..
 Catch ..
 Finally Statements & Exceptions
\end_layout

\begin_layout Standard

\family typewriter
Try ..
 Catch ..
 Finally
\family default
 statements are not handled under our model.
 This is due to the considerable complexity in analysing them.
 Specifically, 
\end_layout

\begin_layout Itemize
Exceptions may be tainted.
\end_layout

\begin_layout Itemize
A 
\family typewriter
Try
\family default
 block may contain an arbitrary number of sources of exceptions.
\end_layout

\begin_layout Itemize
Functions which throw exceptions may throw different ones based on different
 conditions, and not all of these are necessarily tainted.
\end_layout

\begin_layout Itemize
A 
\family typewriter
Catch
\family default
 block has no syntactical way of distinguishing the types of exceptions
 it is receiving
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
There does exist a so-called conditional catch block, but it is a non-standard
 feature, and not on a standards track.
 **TODO: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Stateme
nts/try...catch**
\end_layout

\end_inset

.
 This is to say that all possible exceptions from a given 
\family typewriter
Try
\family default
 block are caught in one 
\family typewriter
Catch
\family default
 block.
\end_layout

\begin_layout Itemize
Even if the 
\family typewriter
Catch
\family default
 block could distinguish the type of an exception, there could be multiple
 sources of that type of exception.
\end_layout

\begin_layout Itemize
Data flow through the blocks cannot be determined statically, since exceptions
 mean control flow can jump out of the 
\family typewriter
Try
\family default
 block mid-flow, and there are potentially multiple points at which this
 can happen.
\end_layout

\begin_layout Standard
This is not to say that it is impossible to analyse 
\family typewriter
Try ..
 Catch ..
 Finally
\family default
 statements - there probably does exist some reasonable propagation model
 for them which doesn't allow for false-negatives; I merely have not found
 one.
 There is of course the trivial one where we just assume everything in the
 statement is tainted, but that is hardly useful or satisfying.
\end_layout

\begin_layout Standard
The closest I have come to a propagation model for these statements is:
\end_layout

\begin_layout Itemize
Assume all code in the 
\family typewriter
Try
\family default
 block executes.
\end_layout

\begin_layout Itemize
If there are 
\emph on
any
\emph default
 sources of exceptions in the 
\family typewriter
Try
\family default
 block, assume the 
\family typewriter
Catch
\family default
 block executes.
\end_layout

\begin_layout Itemize
If there are any sources of 
\emph on
tainted
\emph default
 exceptions in the 
\family typewriter
Try
\family default
 block, treat the 
\family typewriter
Catch
\family default
 block as a tainted scope.
\end_layout

\begin_layout Itemize
Assume all code in the 
\family typewriter
Finally
\family default
 block (if such a block exists) executes, after the other two blocks.
\end_layout

\begin_layout Standard
However, because of the complexities of the 
\family typewriter
Try ..
 Catch ..
 Finally
\family default
 statements, I have been unable to properly check if this model is sufficient.
\end_layout

\begin_layout Standard
Exceptions, by contrast, are relatively simple - they can be handled as
 another type of 
\family typewriter
Return
\family default
 statement, if they are not themselves wrapped in a 
\family typewriter
Try
\family default
 block.
 However, a model for exceptions is not particularly useful without the
 corresponding 
\family typewriter
Try
\family default
 statement to handle them.
\end_layout

\begin_layout Standard
A promising avenue of inquiry is a paper on 
\begin_inset Quotes eld
\end_inset

Analysis of Programs With Exception-Handling Constructs
\begin_inset Quotes erd
\end_inset

 **TODO: Ref http://pleuma.cc.gatech.edu/aristotle/pdffiles/icsm98-exceptions.pdf**
 which attempts to deal with the analysis of exception handling constructs
 in Java.
 Java's exception handling is similar enough to JavaScript that their work
 can likely be carried over.
\end_layout

\begin_layout Standard
The problem is also trivially handled under a dynamic data tainting model.
\end_layout

\begin_layout Subsection
With Statements
\begin_inset CommandInset label
LatexCommand label
name "sub:With-Statements"

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
With
\family default
 statements are disallowed under our model.
 This is due to the fact that they create behaviour which is at best very
 difficult to analyse without actually executing it.
 Take for example:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "tabsize=4"
inline false
status open

\begin_layout Plain Layout

var obj1 = {b: "Hello"};
\end_layout

\begin_layout Plain Layout

var obj2 = {foo: "World"};
\end_layout

\begin_layout Plain Layout

(function (a, b) {
\end_layout

\begin_layout Plain Layout

	with (a) {
\end_layout

\begin_layout Plain Layout

        b = "Goodbye";
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

})(obj1,obj2);
\end_layout

\begin_layout Plain Layout

alert(obj1.b); //alerts "Goodbye"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The above will alert 
\begin_inset Quotes eld
\end_inset

Goodbye
\begin_inset Quotes erd
\end_inset

.
 However, the function 
\emph on
cannot
\emph default
 be analysed in isolation, since in isolation it is impossible to know if
 the identifier 
\family typewriter
b
\family default
 refers to the formal parameter of the function, or to a member of 
\family typewriter
a
\family default
.
\end_layout

\begin_layout Standard
Thankfully, 
\family typewriter
with
\family default
 is a convenience statement
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
And a rather poor one, by my own option.
\end_layout

\end_inset

, rather than one that is necessary to the use of the language, so we lose
 very little by disallowing it.
\end_layout

\begin_layout Subsection
Events
\end_layout

\begin_layout Standard
Events are problematic because they are capable of running code outside
 the normal execution flow.
 They are also a source of potentially tainted data.
 Their use cannot be disallowed, as they area vital part of creating interactive
 applications.
\end_layout

\begin_layout Standard
We therefore need to deal with three aspects of events:
\end_layout

\begin_layout Itemize
The attaching of events to tainted entities.
\end_layout

\begin_layout Itemize
Their interaction with the broader execution flow.
\end_layout

\begin_layout Itemize
Event bubbling.
\end_layout

\begin_layout Standard
In the first case, we say that the 
\emph on
entirety
\emph default
 of any event attached to a tainted entity is itself tainted, as is everything
 which occurs within the event handler.
\end_layout

\begin_layout Standard
If an event is attached to an untainted object, we must still consider its
 associated callback function.
 If the callback function does not interact with identifiers out of scope
 of the function, then we can analyse it as normal.
 If, on the other hand, it does interact with out of scope identifiers,
 we must consider those identifiers to be tainted within the event handler
 if those identifiers become tainted at any point in the control flow analysis,
 even if they are later untainted.
 This is necessary, because we do not know at what point the event handlers
 will be triggered in the execution flow.
\end_layout

\begin_layout Standard
Finally, if an event occurs, and there is no handler attached to the inner-most
 DOM node that it occurs on, then the event will bubble up DOM nodes until
 it fines an appropriate handler, or until it reaches the outer-most DOM
 node without finding one 
\begin_inset CommandInset citation
LatexCommand cite
key "Events"

\end_inset

.
 The event object specifies the original target of the event.
 This original target may contain sensitive data.
 We must therefore consider the original target tainted.
\end_layout

\begin_layout Subsection
Functions
\begin_inset CommandInset label
LatexCommand label
name "sub:Functions"

\end_inset


\end_layout

\begin_layout Standard
JavaScript's functions are a heavily overloaded construct
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
To put it mildly.
\end_layout

\end_inset

, so their behaviour with respect to data tainting deserves special care
 and consideration.
\end_layout

\begin_layout Subsubsection*
Function Calls
\end_layout

\begin_layout Standard
Firstly, as we defined in the section on 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sub:Function-Calls"

\end_inset

, if a function is 
\emph on
called
\emph default
 with tainted arguments, then its return value will also be considered tainted.
 This is on the principle that the result of any function a programmer would
 actually write almost certainly depends upon its arguments, and if this
 is not the case, they are always capable of rewriting it.
\end_layout

\begin_layout Subsubsection*
Pass-By-Reference
\end_layout

\begin_layout Standard
Secondly, we must consider the possibility of an object being modified via
 pass-by-reference.
 JavaScript does not possess an explicit pass-by-reference mechanism (there
 is nothing analogous to a C pointer).
 However, it will implicitly pass objects and arrays by reference.
 More accurately, it will pass a copy of their location in the runtime's
 memory, but the effect is still what is generally considered pass-by-reference.
 Thus we must deal with functions such as
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

function foo(obj) {
\end_layout

\begin_layout Plain Layout

	obj.bar = taintedEntity;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here, 
\family typewriter
obj.bar
\family default
 becomes tainted within the function.
 Any object the function is called on should therefore become tainted outside
 the function.
 
\end_layout

\begin_layout Standard
In general, if a parameter is treated as an object or array within a function,
 and as a result becomes tainted, then we must treated the parameter itself
 as tainted.
 The result is that arguments to such parameters in a call of that function
 must also become tainted.
 For example
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var anObject = {bar : "Hello", baz: "World"};
\end_layout

\begin_layout Plain Layout

foo(anOject);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Before the call to 
\family typewriter
foo
\family default
, 
\family typewriter
anObject
\family default
 is not tainted.
 After the call it is, because 
\family typewriter
foo
\family default
's first parameter is tainted.
\end_layout

\begin_layout Standard
It is worth noting that even if a parameter is an object or array, only
 altering its members has an effect outside the function.
 Reassigning the parameter itself will not.
 Thus:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var obj1 = {foo : "hello"};
\end_layout

\begin_layout Plain Layout

(function (a) {
\end_layout

\begin_layout Plain Layout

	a = {foo: "goodbye"};
\end_layout

\begin_layout Plain Layout

})(obj1);
\end_layout

\begin_layout Plain Layout

alert(obj1.foo); //Will alert "hello"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is important, as it means we may detect whether a parameter is an object
 or array by the way it is treated within the function - i.e.
 by use of 
\family typewriter
a.b
\family default
 or 
\family typewriter
a[b]
\family default
 notation - and if it is not treated as such, then it does not matter if
 it is an object or array.
 **TODO: Make sure this is actually true.**
\end_layout

\begin_layout Standard
Just as an object may become tainted via pass-by-reference, we must also
 consider the possibility whereby arguments taint each other.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

var obj1 = {foo : taintedEntity};
\end_layout

\begin_layout Plain Layout

var obj2 = {foo : untaintedEntity};
\end_layout

\begin_layout Plain Layout

(function (a, b) {
\end_layout

\begin_layout Plain Layout

	var tmp = a.foo;
\end_layout

\begin_layout Plain Layout

	a.foo = b.foo;
\end_layout

\begin_layout Plain Layout

	b.foo = tmp;
\end_layout

\begin_layout Plain Layout

})(obj1,obj2);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here, 
\family typewriter
obj2
\family default
 will become tainted by 
\family typewriter
obj1
\family default
.
 
\end_layout

\begin_layout Standard
The solution is to create a relation between the parameters of a particular
 function.
 For parameters 
\begin_inset Formula $p_{1}\ldots\, p_{n}$
\end_inset

.
 we say that 
\begin_inset Formula $\forall i,j\in\left\{ 1,\dots,\, n\right\} :\, p_{i}\overset{\text{taints}}{\to}p_{j}\iff(p_{j}$
\end_inset

 is an object or array, and 
\begin_inset Formula $p_{i}$
\end_inset

 being tainted at the beginning of the function results in 
\begin_inset Formula $p_{j}$
\end_inset

 being tainted at the end of the function
\begin_inset Formula $)$
\end_inset

.
 Because of the idempotent nature of the taint property, and they way in
 which it spreads, it is sufficient to test each of the function parameters
 in turn - that is, mark one parameter as tainted and observe its effects
 upon the other parameters, then un-mark it and repeat for the next parameter.
\end_layout

\begin_layout Standard
Once this set of relations is computed, whenever we encounter a call to
 a function, we may observe which arguments are initially tainted, look
 up the relations for those arguments, and taint the other function arguments
 appropriately.
\end_layout

\begin_layout Subsubsection*
Out-of-Scope Variables
\end_layout

\begin_layout Standard
JavaScript will happily use identifiers from out of a function's scope,
 if no such identifier is found within its scope.
 However, because such variables may be changed at many different points
 in the program, it can be difficult to analyse their taint status.
\end_layout

\begin_layout Standard
The simplest way to deal with such variables is to treat them as implicit
 parameters to the function, and analyse them as such.
 However, we must make the adjustment that such parameters do 
\emph on
not
\emph default
 need to reference parameters in order to have an effect outside the function.
\end_layout

\begin_layout Standard
Once analysed in this way, whenever we encounter a call to a function which
 makes use of identifiers outside its scope, we can use the current taint
 status of such identifiers when analysing the effect of the function call.
\end_layout

\begin_layout Subsubsection*
Function Arguments
\end_layout

\begin_layout Standard
JavaScript allows functions to be passed as arguments to function calls.
 Functions which utilise this feature are more difficult to analyse than
 those that do not, as a function's parameters may be tainted or not, rather
 than just the function itself.
 In order to analyse such functions, we defer their analysis until a call
 to said function is encountered, in which case we can substitute in the
 actual function used for the placeholder.
 This does mean that we must re-analyse such functions at each call point,
 though some caching may be possible.
\end_layout

\begin_layout Standard
It 
\emph on
might
\emph default
 be possible to pre-compute the effects in the same way we do for function
 parameters.
 However, JavaScript's lack of an explicit or strong type system, combined
 with the variadic nature of its functions, makes that prospect something
 best left to the realms of theory for now.
 Additionally, it is still possible to pre-compute the effects of all non-functi
on parameters.
\end_layout

\begin_layout Subsubsection*
Recursive Function Calls
\end_layout

\begin_layout Standard
As is always the case with static analysis techniques, recursion makes everythin
g more difficult.
 All rules which apply to non-recursive functions also apply to recursive
 functions; however, we must also add in several additional rules in order
 to make them behave properly.
 As with loops, we disallow the untainting of identifiers within recursive
 functions.
 We then repeatedly iterate through the function calls until the taint status
 of all identifiers within the function stabilises (i.e.
 reaches a fixpoint).
\end_layout

\begin_layout Standard
In the case of mutually recursive functions (or chains thereof), we iterate
 through the recursion chain until the taint statuses of all functions in
 the chain have stabilised.
\end_layout

\begin_layout Subsection
Objects & Classes
\end_layout

\begin_layout Standard
JavaScript encodes its classes as functions
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
If I may take a moment to personally comment on this situation: What on
 Earth were the language designers smoking when they decided that 
\emph on
that
\emph default
 was a good idea?
\end_layout

\end_inset

.
 This makes analysing them somewhat challenging.
\end_layout

\begin_layout Standard
As noted above, if a property of a specific instantiation of an object becomes
 tainted, the whole object must be tainted.
 We must taint the whole object as opposed to just the property, because
 information could potentially be gained by the existence or non
\emph on
-
\emph default
existence of specific object properties.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "tabsize=4"
inline false
status open

\begin_layout Plain Layout

var sens = getSensitiveInformation();
\end_layout

\begin_layout Plain Layout

var myObj = {};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(hasInterestingProperty(sens) {
\end_layout

\begin_layout Plain Layout

	myObj.yes = true;
\end_layout

\begin_layout Plain Layout

	myObj.stillYes = true;
\end_layout

\begin_layout Plain Layout

} else {
\end_layout

\begin_layout Plain Layout

	myObj.no = true;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if(Object.keys(myObj).length == 2){
\end_layout

\begin_layout Plain Layout

	//Object has interesting property.
\end_layout

\begin_layout Plain Layout

	//Send this info to server.
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
As for classes, if any of the member functions or properties is tainted,
 or if any of the classes in the prototype chain are tainted, then the class
 itself is considered tainted, and therefore any time it is instantiated,
 the instantiated object will be considered tainted.
\end_layout

\begin_layout Standard
A class does not automatically become tainted by another class using it
 as a prototype.
\end_layout

\begin_layout Subsection
Web Workers
\end_layout

\begin_layout Standard
The Web Workers API 
\begin_inset CommandInset citation
LatexCommand cite
key "WebWorkers"

\end_inset

 provides a method of introducing genuine concurrency into JavaScript applicatio
ns.
 While this is an 
\emph on
incredibly
\emph default
 useful feature, concurrency makes static analysis very difficult.
 We therefore disallow the use of Web Workers under the model.
\end_layout

\begin_layout Section
\begin_inset CommandInset label
LatexCommand label
name "sec:Initially-Tainted-Functions"

\end_inset

Initially Tainted Functions
\end_layout

\begin_layout Standard
The other thing we require for this approach is to define a set of initial
 tainted functions.
 Broadly, this is defined as any function with the capability to retrieve
 sensitive information from the DOM.
 To the extent that I have been able to research, the only functions with
 this capability reside within the DOM API, although there are a 
\emph on
lot
\emph default
 of APIs available to the browser 
\begin_inset CommandInset citation
LatexCommand cite
key "WebAPIs"

\end_inset

, so it is possible that there exist other functions with the capability.
 In either case, we shall focus our attention on the DOM API, as it is contains
 by far the most widely used set of functions known to have the capability,
 and the principles we shall use can easily be extended to other functions
 and APIs.
\end_layout

\begin_layout Standard
The aim is to define the set of initially tainted functions as narrowly
 as possible, as it is preferable to be as unrestrictive as is safely possible.
 I do not claim that I have actually 
\emph on
achieved
\emph default
 this, however - it is likely that there is room to either remove functions,
 or find a different but equally safe formulation.
\end_layout

\begin_layout Subsection
Specific Functions
\begin_inset CommandInset label
LatexCommand label
name "sub:Specific-Functions"

\end_inset


\end_layout

\begin_layout Standard
The set of initially tainted functions - along with their reason for inclusion
 in the set - is detailed in Table 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Initially-Tainted-Functions"

\end_inset

.
 
\end_layout

\begin_layout Standard
In addition to these functions, all accesses of the section of the 
\family typewriter
localStorage
\family default
 object used to store the private key and master key are tainted.
 This is expressly so that the elementary cryptography functions cannot
 be reimplemented in application code in order to create untainted versions
 of them, and also so they cannot be communicated to the server.
 Access to other sections of the 
\family typewriter
localStorage
\family default
 object are not tainted.
\end_layout

\begin_layout Standard
The 
\family typewriter
document
\family default
 object is specifically designated as not tainted, as otherwise almost every
 useful inbuilt method and object in the DOM and JavaScript runtime would
 be tainted by extension.
 This does preclude adding new properties and functions to the 
\family typewriter
document
\family default
 object.
\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="26" columns="3">
<features islongtable="true" longtabularalignment="center">
<column alignment="center" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="middle" width="50col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DOM API Object
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Function/Attribute
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Specific Risk
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
document
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
anchors
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns an array of all 
\family typewriter
<a>
\family default
 elements in the DOM
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
body
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the 
\family typewriter
<body>
\family default
 node, which may contain sensitive information.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
documentElement
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the 
\family typewriter
<html>
\family default
 node, which may contain sensitive information.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
forms
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns an array of all 
\family typewriter
<form>
\family default
 elements in the DOM.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
getElementsById
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the element with a specified ID
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
getElementsByName
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns all elements with a specified name.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
getElementsByTagName
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns all elements of a specific tag.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
links
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns an array of all links in the DOM.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
element
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
childNodes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns an array of the child nodes of an element.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
firstChild
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the first child node of an element.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
getElementsByTagName
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the child node so of an element that are a specific tag.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
id
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns an elements ID attribute.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
innerHTML
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the HTML within an element.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
isEqualNode
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Tests if two nodes are equal.
 Could be used to compare a node against one containing sensitive data.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
lastChild
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the last child node of an element.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nextSibling
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gets the next sibling element of a node.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
nodeValue
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the value of an element, which may include sensitive text.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
parentNode
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the parent node of an element.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
previousSibling
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Gets the previous sibling element of a node.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
removeChild
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the element removed.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
replaceChild
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the element replaced.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
textContent
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the textual content of a node, including all child nodes.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
event
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
target
\end_layout

\end_inset
</cell>
<cell multirow="3" alignment="left" valignment="middle" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Can be used to access DOM nodes other than the one the event is attached
 to.
 These nodes could contain sensitive information.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
originalTarget
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
explicitOriginalTarget
\end_layout

\end_inset
</cell>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Initially Tainted Functions
\begin_inset CommandInset label
LatexCommand label
name "tab:Initially-Tainted-Functions"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Preventing-Data-Laundering"

\end_inset

Preventing Data Laundering via the DOM
\end_layout

\begin_layout Standard
It is relatively simple to write a tainted value to the DOM and then read
 it back into JavaScript, storing it in an untainted variable in the process.
 It is also 
\emph on
not
\emph default
 easy to detect this case using static analysis techniques, as doing so
 seems to require (at minimum) knowledge of the DOM structure, due to the
 many different ways it is possible to read in the same DOM node.
 If we are to use purely static analysis, then it becomes necessary to treat
 all read operations from the DOM as tainted - or at least, all read operations
 that occur after a known tainted write.
\end_layout

\begin_layout Standard
Because of this problem, we need to include the functions listed in Table
 
\begin_inset CommandInset ref
LatexCommand ref
reference "tab:Additional-tainted-functions."

\end_inset

 in our set of initially tainted functions.
\end_layout

\begin_layout Standard
\noindent
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\noindent
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="19" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="0pt">
<column alignment="left" valignment="top" width="50col%">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DOM API Object
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Function/Object
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Specific Risk
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
document
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
images
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns an array of all 
\family typewriter
<img>
\family default
 elements in the DOM.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
title
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the 
\family typewriter
<title>
\family default
 element.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
element
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
attributes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns an array of the attributes of an element.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
className
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the class of an element.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
getAttribute
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the value of a particular attribute of an element.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
getAttributeNode
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns a node for a particular attribute of an element.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hasAttribute
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Checks if an element has a specific attribute.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hasAttributes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Checks if an element has any attributes.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
hasChildNodes
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Checks if an element has any child nodes.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
lang
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Can be used to set and get the language code of an element.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
removeAttributeNode
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the attribute node that it removes.
 Same risks as getAttributeNode.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
style
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sets or returns the style attribute of an element.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
tabIndex
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sets or returns the tab index of an element.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
title
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Sets or returns the title attribute of an element.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="3" alignment="center" valignment="middle" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
attribute
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
value
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns or sets the value of an attribute.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
getNamedItem
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the attribute node with a specific name.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
removeNamedItem
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returns the attribute node that it removes.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell multirow="4" alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
setNamedItem
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Returned the replaced attribute node.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Additional tainted functions.
\begin_inset CommandInset label
LatexCommand label
name "tab:Additional-tainted-functions."

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is an instance where dynamic data tainting has a substantial advantage
 over the static case, as using dynamic data tainting would allow us to
 mark DOM nodes themselves as tainted, thus neatly dealing with this issue.
\end_layout

\begin_layout Section
Putting The Usability Back In
\end_layout

\begin_layout Standard
If we were to mark all the functions mentioned in the 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sec:Initially-Tainted-Functions"

\end_inset

 section as tainted, without offering some form of workaround, it would
 be virtually impossible to write any meaningfully useful application in
 JavaScript that did not (under that model) appear to violate a user's privacy.
 We therefore need to offer some way that developers may use as many of
 those functions as possible, but in a way that we can be sure does not
 violate privacy.
\end_layout

\begin_layout Standard
A simple yet powerful approach is to wrap each of the tainted functions
 in function which - when run - checks to see if the attempted operation
 is actually trying to retrieve sensitive data.
 In the case where sensitive data would not be retrieved, the function would
 behave in the same was as its unchecked function.
 In the case where sensitive data would be retrieved, the wrapper function
 would be required to not return the sensitive data.
 However, there are a number of different ways we could handle the specific
 behaviour of such functions:
\end_layout

\begin_layout Standard
The first is to fail silently - i.e.
 return 
\family typewriter
null
\family default
, or some equally non-informative value.
 This is probably not a good approach, as some of the tainted functions
 return 
\family typewriter
null
\family default
 on failure anyway, so it would be difficult for a developer to distinguish
 why a function had failed.
 On the other hand, it would present a uniform mode of failure.
\end_layout

\begin_layout Standard
The second approach is to fail with feedback - i.e.
 return some special predefined value (or an exception) indicating failure,
 and type of failure.
\end_layout

\begin_layout Standard
In the case where an array or object is returned, only some elements of
 which may be sensitive, there also exists the option to remove the sensitive
 items, while leaving the rest intact.
 Again, we may either do so silently, or provide notification that items
 were removed.
\end_layout

\begin_layout Standard
Additionally, these possibilities are not mutually exclusive - it would
 be relatively simple to allow developers to specify the desired behaviour
 of the wrapper functions as one of the inputs to said functions.
\end_layout

\begin_layout Standard
Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:A-privacy-safe-version"

\end_inset

 provides a simplistic example of how we might go about wrapping the 
\family typewriter
getElementByID
\family default
 function.
 **TODO: Consider hierarchy**
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

function safeGetElementById(id) {
\end_layout

\begin_layout Plain Layout

  var elem = document.getElementById(id);
\end_layout

\begin_layout Plain Layout

  var cls = elem.className;
\end_layout

\begin_layout Plain Layout

  if(cls.indexOf("sensitive") == -1) {
\end_layout

\begin_layout Plain Layout

    return elem;
\end_layout

\begin_layout Plain Layout

  } else {
\end_layout

\begin_layout Plain Layout

    return null;
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
A privacy-safe version of 
\family typewriter
getElementById
\begin_inset CommandInset label
LatexCommand label
name "alg:A-privacy-safe-version"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The result of this is the creation of a set of functions with similar functional
ity to our set of tainted functions, but providing the guarantee that no
 sensitive data will be returned by them.
 This allows our taint analysis model to work under the guarantee that such
 functions cannot return tainted values.
 This in turn provides developers with a way to access the DOM, without
 either the developer or the user being concerned about violation of privacy.
\end_layout

\begin_layout Standard
It is still necessary to allow use of the tainted functions, as there are
 legitimate cases where a developer might wish to retrieve sensitive information
 from the DOM.
 For example, one might wish to develop an index of sensitive data on the
 client side, such that it may be quickly searched later.
 Such an index could be encrypted and stored in the same way as other sensitive
 data, and updated as needed.
\end_layout

\begin_layout Subsection
Dealing With Writes
\end_layout

\begin_layout Standard
As mentioned in the section on 
\begin_inset CommandInset ref
LatexCommand nameref
reference "sub:Preventing-Data-Laundering"

\end_inset

, there exists a problem whereby tainted data may be written back to the
 DOM, and then read back in, in order to remove the tainted designation.
 This is not as easily dealt with as merely reading sensitive data from
 the DOM is, as such data will not necessarily be designated as sensitive
 when it is written.
\end_layout

\begin_layout Standard
We therefore create another set of wrapper functions, this time to guard
 writes to the DOM.
 Specifically, such functions designate any data written via them as being
 sensitive.
 **TODO: Investigate possibility of tainting the DOM node.** This enables
 our read functions to detect privacy, and act accordingly.
\end_layout

\begin_layout Standard
On the data taint detection side, we outright disallow the use of unwrapped
 write functions on tainted data.
 The unwrapped functions may still be used on untainted data.
\end_layout

\begin_layout Standard
This should not present a problem for developers, as it is always possible
 to simply keep the tainted data within the JavaScript runtime, instead
 of using a write-and-read-back pattern, and the sensitive designation -
 by design - should not have an effect on the way the DOM itself behaves.
\end_layout

\begin_layout Standard
**TODO: Specify which functions this affects**
\end_layout

\begin_layout Section
Detecting Incidental Communication
\end_layout

\begin_layout Standard
AJAX calls are the primary method used to communicate with the outside world
 from within JavaScript.
 There may be other such methods of communication available to JavaScript
 - there are after all a 
\emph on
lot
\emph default
 of Web APIs 
\begin_inset CommandInset citation
LatexCommand cite
key "WebAPIs"

\end_inset

, and I have not been able to check all of them.
 However, the analysis conducted with respect to AJAX can be applied to
 all such possibilities.
\end_layout

\begin_layout Standard
A more difficult problem is presented by the ability of the JavaScript runtime
 to communicate with a server via the loading of external resources.
 Consider the code in Algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:jQuery-code-external"

\end_inset

, which loads a CSS file based on some arbitrary property of a piece of
 sensitive data.
 No sensitive data is actually communicated to the server, but the server
 is nevertheless able to discern the presence of sensitive data with that
 particular property on the page.
 Given that the service controls both the JavaScript code, and the structure
 of the page, there is virtually no limit to what information could be gained
 using this method.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

$(document).ready(function() {
\end_layout

\begin_layout Plain Layout

  // Lifts sensitive data from page
\end_layout

\begin_layout Plain Layout

  var data = getSensitiveData();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

  if(hasInterestingProperty(data)) {
\end_layout

\begin_layout Plain Layout

    $('head').append(
\end_layout

\begin_layout Plain Layout

      "<link type='text/css' rel='stylesheet'
\end_layout

\begin_layout Plain Layout

      href='innocentCSSFile.css'>");
\end_layout

\begin_layout Plain Layout

  }
\end_layout

\begin_layout Plain Layout

});
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
jQuery code to load an external CSS file.
\begin_inset CommandInset label
LatexCommand label
name "alg:jQuery-code-external"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Any external resources which are loaded during page load (i.e.
 before the JavaScript runtime starts) are safe, as their fetching cannot
 be used to communicate any sensitive information.
 We therefore only need to deal with 
\end_layout

\begin_layout Standard
The most obvious way to deal with this issue is to interpose on individual
 HTTP GET requests, and detect whether they are loading something which
 is not already loaded.
 This would have the unfortunately consequence of having to load in all
 external resources at page-load, regardless of actual need for them.
\end_layout

\begin_layout Standard
The alternative is to check all DOM nodes and HTML fragments before they
 are added to the DOM, to determine whether they use an external resource
 which has not already been loaded.
 This is quite a complex check; there are a lot of elements capable of loading
 in external resources - particularly since the introduction of HTML5 -
 and traversing and interpreting a DOM tree is itself a moderately complex
 exercise.
 However, it can be done.
 The upside to this approach is that such a check can be performed in JavaScript
 at runtime, meaning that we can provide checked and unchecked versions
 of functions which allow DOM modification, and apply taint analysis to
 the unchecked ones.
\end_layout

\begin_layout Section
Ensuring Analysability
\end_layout

\begin_layout Standard
In order to analyse the JavaScript code for a particular webpage, we first
 need to ensure that the code is reasonably static - that is, the code that
 is analysed is the code that will actually be run on the user's machine.
 JavaScript possesses a number of mechanisms capable of subverting this.
\end_layout

\begin_layout Standard
Firstly there is the 
\family typewriter
eval
\family default
 function, which accepts an arbitrary string, and will attempt to evaluate
 (i.e.
 execute) it in the JavaScript runtime environment.
 In other words, it enables arbitrary code execution.
 Even if the rest of the code is entirely static, if the server or some
 third party is able to manipulate the string(s) passed to a call to 
\family typewriter
eval
\family default
, then all other analysis is useless.
 Thankfully, it is rarely actually necessary to use the 
\family typewriter
eval
\family default
 function (most of what it's used for can easily be done in some other way),
 and most coding standards and security policies recommend against its use.
 The same may be said for string arguments to 
\family typewriter
setTimeout
\family default
 and 
\family typewriter
setInterval
\family default
, both of which allow for arbitrary code execution.
 For these reasons, we disallow the use of 
\family typewriter
eval
\family default
, and string arguments to 
\family typewriter
setTimeout
\family default
 and 
\family typewriter
setInterval
\family default
 under the model.
 Function arguments to 
\family typewriter
setTimeout
\family default
 and 
\family typewriter
setInterval
\family default
 are fine.
\end_layout

\begin_layout Standard
Secondly, it is possible to embed JavaScript code directly into the HTML
 page, through the use of 
\family typewriter
<script>...</script>
\family default
 tags.
 While such tags are not strictly speaking problematic in their own right,
 they are largely unnecessary, as anything which can be done in them can
 be done in an external file, and it is easier to analyse the behaviour
 of a set of external files.
 The bigger problem with such `inline' script tags, as opposed to ones which
 load in an external file, is that they can be added in after page-load
 with arbitrary contents.
 For example:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

function foo() {
\end_layout

\begin_layout Plain Layout

    alert("Hello");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

var s = document.createElement('script');
\end_layout

\begin_layout Plain Layout

s.innerHTML="function foo() {alert('Goodbye');}";
\end_layout

\begin_layout Plain Layout

document.head.appendChild(s);
\end_layout

\begin_layout Plain Layout

foo(); //Alerts "Goodbye"
\end_layout

\end_inset


\end_layout

\begin_layout Standard
For this reason, we disallow the use of inline script tags under the model.
\end_layout

\begin_layout Standard
For very similar reasons, the use of 
\family typewriter
onclick
\family default
 attributes, and of links with an 
\family typewriter
href
\family default
 attribute beginning with 
\begin_inset Quotes eld
\end_inset


\family typewriter
javascript:
\family default

\begin_inset Quotes erd
\end_inset

 are disallowed under the model.
 Neither are necessary, in that everything they provide can equally be achieved
 in an external file.
\end_layout

\begin_layout Standard
Lastly, it is possible to dynamically load in external scripts by appending
 a new 
\family typewriter
<script>
\family default
 tag to the DOM, with the 
\family typewriter
src
\family default
 attribute pointing to some external URI, or by altering an existing one.
 Again, there are few circumstances where this is actually necessary.
 Generally it is merely convenient.
 We therefore disallow loading in scripts not present on the initial page.
\end_layout

\begin_layout Section
Ensuring Indistinguishability
\end_layout

\begin_layout Standard
It is necessary to ensure that a service cannot distinguish between users
 who have the plugin described here installed, and those that do not.
 If we cannot ensure this, then a service could simply serve different code
 to the different user groups.
\end_layout

\begin_layout Standard
It is currently possible to access a list of browser plugins from within
 JavaScript via the 
\family typewriter
navigator.plugins
\family default
 object 
\begin_inset CommandInset citation
LatexCommand cite
key "NavigatorPlugins"

\end_inset

.
 Mozilla at least is planning to limit the ability of JavaScript code to
 enumerate through this list, instead restricting it to a direct query for
 specific plugins - however, that does not appear to have fully happened
 yet.
 In any case, we need to ensure two things:
\end_layout

\begin_layout Enumerate
That the JavaScript code is not specifically querying for the plugin described
 here.
\end_layout

\begin_layout Enumerate
That the JavaScript code is not enumerating through the list of plugins,
 at all.
\end_layout

\begin_layout Standard
It should be noted that the 
\family typewriter
navigator.plugins
\family default
 object does not include things such as Firefox's AddOns.
 However, it is also not a part of any standard (though it is widely supported),
 so its behaviour with respect to what it reports may vary across browsers.
\end_layout

\begin_layout Section
Flash, Java, Silverlight, et al.
\end_layout

\begin_layout Standard
Flash has the capability to access the JavaScript runtime, and through it
 sensitive information contained in the DOM.
 Unlike JavaScript, the behaviour of Flash objects on a page is not easily
 analysed, because their source code is not readily readable.
 For this reason, Flash is incompatible with the model, and therefore its
 use disallowed under the model 
\begin_inset CommandInset citation
LatexCommand cite
key "FlashAccessJS"

\end_inset

.
 
\end_layout

\begin_layout Standard
Java applets face a similar issue, in that they are capable of accessing
 and manipulating the DOM 
\begin_inset CommandInset citation
LatexCommand cite
key "JavaAccessDOM"

\end_inset

.
 Again, the behaviour of such applets is not easily analysed, and their
 use is therefore disallowed under the model.
\end_layout

\begin_layout Standard
I am not familiar enough with Microsoft's Silverlight to comment on its
 analysability, but it is certainly also capable of accessing the DOM.
 It - and any other third-party methods of delivering so called rich content
 - must be disallowed under the model if they are both capable of accessing
 the DOM, and not readily analysable.
 In the event that they 
\emph on
are
\emph default
 analysable, it may be possible to perform some analysis similar to what
 is described above with relation to JavaScript.
\end_layout

\begin_layout Section
Data Exchange
\begin_inset CommandInset label
LatexCommand label
name "sec:Data-Exchange"

\end_inset


\end_layout

\begin_layout Standard
**TODO: Ref.
 Specifically, Cert Auth.**
\end_layout

\begin_layout Standard
As noted in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Making-Sensitive-Information"

\end_inset

, there is a very obvious potential man-in-the-middle attack related to
 the exchange of sensitive data between users.
 In particular, if the service is the entity facilitating the exchange of
 public keys between the users, then it can easily substitute the user's
 public keys with ones that it controls, allowing it to read the messages.
 Moreover, this attack is not easily detectable on the client side, because
 it can re-encrypt the messages with the keys the users expect.
\end_layout

\begin_layout Standard
The general approach to solving this problem is to perform the key exchange
 via a side-channel not controlled by the service.
 Unfortunately, to ensure usability for those not capable of doing this,
 the service does still need to perform the key exchange.
 However, we can 
\emph on
verify
\emph default
 key-identity pairings via an independent side-channel.
 Specifically, what we need is some third party which is trusted by the
 user that can attest to the authenticity of the public keys supplied by
 the service.
 This in turn requires that there exists a third party (or third parties)
 which possess those bindings.
\end_layout

\begin_layout Standard
The simplest way is for the service-provided JavaScript code to automatically
 report the username‒public-key binding to a third party service - which
 we shall term the identify verifier - at signup.
 The JavaScript code can then use both the main service, and the identity
 verifier in order to verify the authenticity of the keys, and the plugin
 can check that this is actually occuring.
 This approach is still somewhat vulnerable, in that an adversary could
 potentially take control of both services.
 However, two services are safer than one, in that regard.
\end_layout

\begin_layout Standard
There are some additional measures that we can take within the plugin to
 ensure key authenticity.
 Firstly, individual users of the plugin are able to verify the authenticity
 of their own keys.
 That does not assist in the problem of data exchange, but it can be used
 to detect misreporting on the part of the service or the identity verifier,
 which could indicate a security/privacy breach.
\end_layout

\begin_layout Standard
Secondly, there is no technical reason to restrict ourselves to a single
 identity verifier.
 The more such services which exist, preferably in disparate geographical
 locations and legal jurisdictions, the less likely that any one adversary
 can compromise them all.
 Having multiple verifiers also allows the user to chose to use ones that
 they trust most.
\end_layout

\begin_layout Standard
Thirdly, there is no requirement that identity verification be a centralised
 operation.
 OpenPGP has demonstrated that so called webs-of-trust 
\begin_inset CommandInset citation
LatexCommand cite
key "OpenPGP"

\end_inset

 are a viable method of performing key acquisition and verification.
 Such a system would actually be highly applicable in cases where users
 are only trying to communicate with a few individuals who are known to
 them - for example, in the case of a social network.
 There is also no reason that centralised and decentralised methods cannot
 work along side one another.
\end_layout

\begin_layout Section
Ensuring Integrity of Cryptographic Code
\end_layout

\begin_layout Standard
We assume that there is available a reference implementation of the cryptographi
c code, and all privacy preserving functions defined above.
 Said reference implementation must be available to both the creators of
 the service, and the creators of the plugin.
 Said reference implementation must be used verbatim by the service.
\end_layout

\begin_layout Standard
With these assumptions, the plugin may take a hash of the reference implementati
on, and check for its presence at page load.
 There may, of course, be multiple different reference implementations for
 different purposes.
\end_layout

\begin_layout Standard
Additionally, we must ensure that the rest of the application code does
 not interfere with the cryptographic code.
 This is reasonable straightforward - we check that there are no assignments
 to any of the identifiers in the reference implementation.
\end_layout

\begin_layout Subsection
Key Integrity
\end_layout

\begin_layout Standard
While reads from the master key and private key are tainted (see §
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Specific-Functions"

\end_inset

), writes to the master and private key by anything other than the cryptographic
 code are expressly disallowed.
 This is to ensure application code does not substitute these keys with
 ones it controls.
\end_layout

\begin_layout Section
Ensuring Integrity of Application Code
\end_layout

\begin_layout Standard
In order to ensure that the application code received by the user is the
 code that the service intended to send, we require that the service do
 three things.
 
\end_layout

\begin_layout Itemize
Firstly, that it create a public/private key-pair, and attach the public
 key to its SSL certificate.
\end_layout

\begin_layout Itemize
Secondly, that it uses this public key to sign a hash of the top-level HTML
 page, and includes this signed hash in the response headers for the page.
\end_layout

\begin_layout Itemize
Thirdly, that all references to external resources on the HTML page include
 a 
\begin_inset Quotes eld
\end_inset

hash=
\emph on
h
\emph default

\begin_inset Quotes erd
\end_inset

 parameter in their query string, where 
\emph on
h
\emph default
 is a hash of the external resource.
\end_layout

\begin_layout Standard
The plugin may then check the hashes of each of the external resources against
 the ones provided in the query string.
 This approach is taken directly from 
\begin_inset CommandInset citation
LatexCommand cite
key "Mylar"

\end_inset

.
\end_layout

\begin_layout Section
Summary
\end_layout

\begin_layout Chapter
Discussion & Further Work
\end_layout

\begin_layout Standard
**TODO:
\end_layout

\begin_layout Standard
- Moving processing to client
\end_layout

\begin_layout Standard
- Relative uniqueness of model
\end_layout

\begin_layout Standard
- Homomorphic encryption
\end_layout

\begin_layout Standard
- Same origin policy
\end_layout

\begin_layout Standard
- XSS attacks from other users**
\end_layout

\begin_layout Section
Strengths and Weaknesses
\end_layout

\begin_layout Subsection
General Discussion of Strengths
\end_layout

\begin_layout Standard
The greatest strength of the work presented in this paper is that it's an
 effective and usable way to ensure online privacy, not just for those who
 seek such privacy, but for all users.
 It is capable of providing strong protection against the problem of mass
 data theft by criminals, and the practice of mass surveillance, while 
\emph on
retaining
\emph default
 the ability of surveillance agencies and law enforcement to perform specific,
 targeted surveillance of individuals
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
That is to say, nothing in this thesis stops them from performing surveillance
 on specific individual users or client machines.
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
The model is also very generic in nature.
 I have focused quite specifically on the HTML+JS+Browser stack, as that
 is - by a wide margin - the most used method for delivering web services,
 particularly to those uses who are not actively seeking to protect their
 privacy.
 However, the only thing really restricting the model to that set of technologie
s is the ability to access a web-page's JavaScript source-code.
 If that barrier can be overcome - for example, by publishing the source-code
 in other ways, or by analysing byte- or machine-code - then the model could
 easily be applied to other methods of web application delivery, such as
 mobile apps, and even (if it ever becomes necessary) general installed
 programs.
\end_layout

\begin_layout Standard
If a service-provider wishes to attempt to guarantee their user's privacy
 by legal means - for example, by operating in a country with strong privacy
 laws - then they can forgo everything described in the plugin model and
 rely on the legalistic protections instead.
 This is the approach taken by several companies in the field, including
 Mega 
\begin_inset CommandInset citation
LatexCommand cite
key "Mega"

\end_inset

 and Proton Mail 
\begin_inset CommandInset citation
LatexCommand cite
key "ProtonMail"

\end_inset

, which have chosen to operate from New Zealand, and Switzerland, respectively.
 Whether a technical or legal solution is preferable is really a matter
 of opinion.
\end_layout

\begin_layout Standard
The use of the service model alone is sufficient to guarantee user privacy
 in every case except those where an adversary gains control of the application
 servers or the service's encryption keys - that is to say, cases where
 an adversary can send arbitrary malicious code to the client.
\end_layout

\begin_layout Standard
There also exists another possibility which negates the need for many of
 the checks described in the plugin model.
 Briefly, the motivation behind that model is that we cannot 
\emph on
trust
\emph default
 the code coming from the server, and must therefore verify that it isn't
 doing something it isn't supposed to.
 However, under the service model, most of the operations performed on the
 server-end is store/fetch operations, as it is unable to do any complex
 computations over the encrypted data.
 This means that all the relevant application logic is present in the client
 side code, with the result that a user - if they were so inclined - could
 simply drop in their own client-side application which they 
\emph on
do
\emph default
 trust, and which cannot be modified by the service, and thereby negate
 most of the remaining privacy and security concerns.
 
\end_layout

\begin_layout Standard
Such a possibility is not without its drawbacks - in particular, it removes
 the ability of a service-provider to easily deliver updates to its service
 to all users.
 However, that trade-off may be worth it, in the case of some services.
 Mega notably provides a public API for its service, and explicitly states
 on its website:
\end_layout

\begin_layout Quotation
\begin_inset Quotes eld
\end_inset


\shape slanted
If you don't trust us, you cannot run any code provided by us, which precludes
 opening MEGA in your browser and entering your login credentials.
 However, due to MEGA's end-to-end encryption paradigm, you can safely use
 client applications written by someone you trust.
\shape default

\begin_inset Quotes erd
\end_inset

 
\begin_inset CommandInset citation
LatexCommand cite
key "MegaSecurityAndPrivacy"

\end_inset


\end_layout

\begin_layout Subsection
General Discussion of Weaknesses
\end_layout

\begin_layout Standard
The most glaring weakness of this thesis, and the ideas presented within,
 is the lack of a full implementation.
 While sections of it were implemented, such implementations were almost
 invariability prototypical and incomplete in nature.
\end_layout

\begin_layout Standard
Anyone seeking to use the work presented here would need to create a complete
 and robust implementation of both the service model and the plugin.
 The model described in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Service-Model"

\end_inset

 draws upon a wide body of existing literature, as well as some existing
 implementations 
\begin_inset CommandInset citation
LatexCommand cite
key "Mega,Crypocat,ProtonMail,Mylar"

\end_inset

, and is presented with considerable confidence.
 The model presented in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Plugin-Model"

\end_inset

 - especially the parts relating to data tainting - have not been validated,
 and should not be relied upon as an authoritative implementation.
 It is presented firstly as a demonstration of the implementability of the
 declared requirements, and secondly as indication of how to go about a
 full implementation.
 
\end_layout

\begin_layout Standard
This is not to say that there is doubt about whether taint analysis 
\emph on
can
\emph default
 be performed in JavaScript; indeed, some ancient versions of Netscape actually
 had it as a browser feature 
\begin_inset CommandInset citation
LatexCommand cite
key "DataTaintingJS"

\end_inset

, and there are a number of academic papers on the subject **TODO: Ref**.
 However, all implementations and academic papers I have found on the issue
 utilise dynamic tainting.
 In hindsight, I suspect there is a good reason for that: while it certainly
 requires a little technically wizardry to set up - namely hooking into
 the JavaScript runtime - it has the benefit of it being 
\emph on
much
\emph default
 easier to be certain you are doing it correctly.
 The required technical wizardry is actually not too difficult, either;
 in Firefox at least, the Debugger API 
\begin_inset CommandInset citation
LatexCommand cite
key "DebuggerAPI"

\end_inset

 provides hooks for plugins to both observe and manipulate a page's JavaScript
 runtime.
 The way it is used in both Firefox's internal development tools, and in
 Firebug, suggest that it possesses all the features necessary.
 Dynamic tainting would also neatly step around all of the parts of JavaScript
 that are not covered under the data tainting model presented in Chapter
 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Plugin-Model"

\end_inset

, such as 
\family typewriter
Try ..
 Catch
\family default
 blocks, and 
\family typewriter
With
\family default
 statements, although possibly not web workers.
\end_layout

\begin_layout Subsection
Strengths and Weaknesses of Taint Analysis Model
\end_layout

\begin_layout Standard
The model for taint analysis of JavaScript presented in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Taint-Propagation-Model"

\end_inset

 possesses definite room for improvement.
 In the first instance, there is a need for validation of the correctness
 and completeness of the model as a whole.
 That is to say, it needs to be thoroughly tested to ensure all its components
 work, that all of its components work together, and that no corner cases
 or obscure sections of the ECMAScript
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
JavaScript is an implementation of ECMAScript.
\end_layout

\end_inset

 language specification have been missed.
 Whether such validation is done through rigorous systems testing, formal
 verification, or some other method really depends on how certain one needs
 to be about it.
\end_layout

\begin_layout Standard
Secondly, I believe there is considerable scope to define it more narrowly.
 The model given in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Taint-Propagation-Model"

\end_inset

 is defined in a way which is intended to ensure no false negatives (i.e.
 no possible violations of user privacy), and to have relatively simple
 rules.
 The result is that the model will report many false positives (instances
 where it thinks user privacy could be violated, but in actuality it is
 not).
 It is highly likely that different/more complex rules could be devised
 which still ensure a lack of false negatives, but which drastically reduce
 false positives.
 There is also the possibility of defining a model which permits some false
 negatives in exchange for greatly reduced false positives, without unduly
 risking user privacy - although such a model would inherently be more risky.
\end_layout

\begin_layout Standard
As for its strengths, I believe this is the first instance of the use of
 static taint analysis to detect privacy leakage in JavaScript.
 There exists some work on the individual components 
\begin_inset CommandInset citation
LatexCommand cite
key "LaBaSec,DataTaintingJS,jovanovic2006pixy,sandhutaintsniffer,DynamicTaintAnalysisPrivacy,DataTainting,BlendedTaintAnalysisJS"

\end_inset

, but I am unaware of any other instances of work on the topic as a whole.
 I also believe that while what I have described is certainly not perfect,
 the core concept of using taint analysis to detect privacy vulnerabilities
 has the potential to allow a 
\emph on
lot
\emph default
 of web-service creators to guarantee their users' privacy.
\end_layout

\begin_layout Standard
It should be noted that while there is most definitely other work in the
 broader field (see the above references), I independently 
\begin_inset Quotes eld
\end_inset

invented
\begin_inset Quotes erd
\end_inset

 a lot of the material in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Taint-Propagation-Model"

\end_inset

 (and quite late in the project at that), and 
\emph on
then
\emph default
 went searching for other people's work on the subject.
 It was only by coincidence that I actually discovered the terms 
\begin_inset Quotes eld
\end_inset

taint analysis
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

flow-control analysis
\begin_inset Quotes erd
\end_inset

, which are the prevailing terms for the techniques in academia.
 This unfortunately meant that there was insufficient time to integrate
 much of the other existing work into this thesis.
\end_layout

\begin_layout Subsection
Password Security
\end_layout

\begin_layout Standard
From a security standpoint, one of the more substantial issues with our
 model is the fact that the password is the weakest link in the encryption
 chain.
 It is vulnerable to all the usual attacks on passwords, including key-loggers,
 brute-force and dictionary-based attacks, and phishing.
 In that respect, it is every bit as vulnerable as every other password-protecte
d website.
 On the plus side, it is at least not 
\emph on
more
\emph default
 vulnerable.
\end_layout

\begin_layout Section
Implications for Practice
\end_layout

\begin_layout Subsection
Password Recovery
\end_layout

\begin_layout Standard
Under the service model described in Chapter 
\begin_inset CommandInset ref
LatexCommand ref
reference "chap:Service-Model"

\end_inset

, the user's password is used as a 
\begin_inset Quotes eld
\end_inset

root
\begin_inset Quotes erd
\end_inset

 security token, in the sense that it is used encrypt the master key, which
 encrypts everything else.
 The password is also never stored with the server.
 An unfortunate side effect of this is that if the password is lost, the
 account's data is unrecoverable.
\end_layout

\begin_layout Standard
This risk can be mitigated by recommending to users that they back up either
 their master key or their password.
 However, that is very much a social patch to a technical problem, and not
 one that gels well with the 
\begin_inset Quotes eld
\end_inset

usable by everyone
\begin_inset Quotes erd
\end_inset

 goal of this thesis.
\end_layout

\begin_layout Subsection
Implications for Business Models
\end_layout

\begin_layout Standard
Given that a substantial chunk of the business models of internet companies
 depend upon having access to their user's data, we would be remiss not
 to consider the affect of our model of ensuring privacy upon their business
 models.
\end_layout

\begin_layout Standard
The unfortunate truth is that targeted advertising as it is practised by
 the likes of Google and Facebook is simply incompatible the method of ensuring
 privacy presented in this thesis.
 Those two companies - and many other like them - virtually strip-mine user
 data to try and discover all possible connections to anything that someone
 might want to sell.
 If they do not have access to such data, then the scope of any data mining
 they might wish to do is drastically reduced.
\end_layout

\begin_layout Standard
Even if the data mining was moved to the client - and that is actually an
 interesting possibility worth investigating in its own right - they would
 not be able to pull in advertisements based on that information, as our
 model would detect that as violating the user's privacy.
 The only way I can see to work around this is to pull in the advertisements
 independently of user data, and then combine the two on the client.
 However, that solution does not scale well.
 
\end_layout

\begin_layout Standard
This is not to say that there are not 
\emph on
other
\emph default
 models of targeted advertising which could work, or other business models
 that could profit under these constraints.
 Just that this one does not.
\end_layout

\begin_layout Standard
It also bears mentioning that service critical data is, and always will
 be available to the service - to take an obvious example, Google will always
 know what you search for using its search engine, because it has to know
 in order to give you the results.
 There is nothing to stop a service from performing data mining on service
 critical data, other than the users choosing not to use that service.
\end_layout

\begin_layout Standard
Business models for which user privacy is a strength and/or a selling point
 obviously stand to benefit, as the work presented here provides not only
 a generic technique for providing user privacy, but also for allowing the
 user to ensure it.
\end_layout

\begin_layout Subsection
Applicability to Service Models
\end_layout

\begin_layout Standard
The overall model presented in this thesis is not applicable to all web-services.
 Broadly speaking, it can be applied to two classes of web-service:
\end_layout

\begin_layout Itemize
Those that store sensitive user data for later retrieval by the user.
\end_layout

\begin_layout Itemize
Those that enable the sharing of sensitive data between users.
\end_layout

\begin_layout Standard
Social networks, and file storage are the two most notable classes of web-servic
e to which the model applies.
\end_layout

\begin_layout Standard
It expressly does not apply to any service which requires all the information
 it collects in order to operate - i.e.
 a service in which all data is service-critical.
 **TODO: More of this**
\end_layout

\begin_layout Standard
Email is an interesting case - in principle, the model can be applied to
 it.
 However, it requires that both the sending and receiving email servers
 are capable of handling the required key exchange.
 In the event that the receiving server does not possess the capability,
 the sending server must choose between sending the email as plain text
 - which clearly does not protect the users' privacy - or sending it in
 an encrypted format, and foisting the problem of how to decrypt it on to
 the users.
\end_layout

\begin_layout Standard
The same principle applies to any 
\begin_inset Quotes eld
\end_inset

meta-service
\begin_inset Quotes erd
\end_inset

 which operates across the boundaries of individual services.
 
\end_layout

\begin_layout Subsection
Cross-Site Scripting Attacks
\end_layout

\begin_layout Standard
Because the service is not capable examining encrypted information, there
 exists the possibility that other users can launch cross-site scripting
 attacks by embedding malicious code into information they send to other
 users via the service.
 
\end_layout

\begin_layout Section
Implications for Research
\end_layout

\begin_layout Chapter
Conclusions
\end_layout

\begin_layout Chapter
Acknowledgements
\end_layout

\begin_layout Standard
Many thanks to my supervisor, Roger Clarke, for his many helpful points
 of advice, for sticking with me and this project, and keeping me on track
 (or at least trying to), despite my not always being the best student.
\end_layout

\begin_layout Standard
Also to my partner, Claire, who kept me from going insane while doing this,
 and who somehow hasn't torn my head off, despite the fact that she's 
\emph on
also
\emph default
 trying to write a thesis.
 Also, for ensuring we both have reasonable diets - I would have been a
 very unhealthy man by the end of this without her.
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintAll"
bibfiles "db"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
